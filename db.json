{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/img/9.jpg","path":"img/9.jpg","modified":0},{"_id":"source/img/8.jpg","path":"img/8.jpg","modified":0},{"_id":"source/img/7.jpg","path":"img/7.jpg","modified":0},{"_id":"source/img/6.jpg","path":"img/6.jpg","modified":0},{"_id":"source/img/5.jpg","path":"img/5.jpg","modified":0},{"_id":"source/img/4.jpg","path":"img/4.jpg","modified":0},{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":0},{"_id":"source/img/1.jpg","path":"img/1.jpg","modified":0},{"_id":"source/avatar/tom.jpg","path":"avatar/tom.jpg","modified":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/bali.jpg","path":"css/images/bali.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/_posts/Hexo使用笔记（一）.md","shasum":"903a37300a2d28392164b596cd7f500cfa896869","modified":1461915154645},{"_id":"source/_posts/【Android training】允许其他应用拉起你的应用.md","shasum":"ab13d089a8242b3a1c2e80672ddcfde0c3cf7789","modified":1461915154645},{"_id":"source/_posts/【Android training】引导到另一个APP.md","shasum":"807a2742b70b1e0d759448e8c542da80cdc4bcd7","modified":1461915154645},{"_id":"source/_posts/【Android training】文件共享.md","shasum":"bf93dce2f37b76d0a30579bc2cd5d9b906184730","modified":1461915154645},{"_id":"source/_posts/真相.md","shasum":"70e09cdac8f97aa92eac0b432fa172547868f4eb","modified":1485228966891},{"_id":"source/_posts/序.md","shasum":"f88c4c23c6e5d225bdf2b7fb926d35349f4c3c07","modified":1461915154645},{"_id":"source/_posts/晦涩的成人寓言——斯坦利的寓言.md","shasum":"820f2679b33d5692ba4802015827f99d0a517c09","modified":1461915154645},{"_id":"source/_posts/高效展示你的Bitmap（上）.md","shasum":"d3f8ada8fc04781e91d01cb96f56d2407f2a8d22","modified":1461915154645},{"_id":"source/_posts/谈谈那个大圣的背影.md","shasum":"640c44cd96f2d580a5cc607485250bc8914a47f6","modified":1464093777485},{"_id":"source/img/1.jpg","shasum":"7dc3218733ea0255b7e4eac4c102527892f546fa","modified":1464092630835},{"_id":"source/img/4.jpg","shasum":"b254c237dbc596dc580456dc71bad2ddb7962aa9","modified":1464092785364},{"_id":"source/img/2.jpg","shasum":"c94147230ee35a0671cb4f3d69f8ef3f7a9ace42","modified":1464092681894},{"_id":"source/img/5.jpg","shasum":"5925ef05a4c0ec62d600c2a0d303700ab7d1f7b6","modified":1464092789848},{"_id":"source/img/6.jpg","shasum":"ec22db9cd8e79798a090d72d1028e4c352a13f65","modified":1464092853855},{"_id":"source/img/7.jpg","shasum":"18f88d67be1400142972688b6de0c3c7c71e4a1e","modified":1464092889898},{"_id":"source/img/9.jpg","shasum":"cdff84d9e4e22a0a47d1da3836a98de324a21207","modified":1464092904269},{"_id":"source/img/8.jpg","shasum":"d03147c9f2c9893ce7869ea3cf89c2c50b8b0293","modified":1464092899710},{"_id":"source/avatar/tom.jpg","shasum":"321e5aa23d29ffea43f3c9114123506be052e6cf","modified":1461915154645},{"_id":"themes/landscape/_config.yml","shasum":"c59ab5713d13ab0a147c5275f8aae96aa0beeac6","modified":1461915154665},{"_id":"themes/landscape/Gruntfile.js","shasum":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1461915154655},{"_id":"themes/landscape/README.md","shasum":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1461915154655},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"5062c723721d8497eebad372f57092ade45041f4","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"2680f6731665e2af921b19f775afc1ed87956014","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"7b895f23feb5047b620ad4b21f174107db12be85","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1461915154665},{"_id":"themes/landscape/LICENSE","shasum":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1461915154655},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"b69855e07b65117769adc515cb64b803932068c9","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"65bf933f4b87bbda41eefae52ac1a1cde00deee9","modified":1461915154665},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"d6591c745402fbc600e682830a343f732e336e4f","modified":1461915154665},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"88e191e3d14541299ed03b9a45be70974df51143","modified":1461915154665},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26","modified":1461915154665},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75","modified":1461915154665},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1461915154665},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1461915154665},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"9028129dd2e56813197d0c38db5df8110aaeaabb","modified":1461915154665},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1461915154675},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461915154675},{"_id":"themes/landscape/layout/layout.ejs","shasum":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1461915154675},{"_id":"themes/landscape/layout/post.ejs","shasum":"609d9b07011b66d4bb0f2bf9e0ab4e087c2377a9","modified":1461915154675},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1461915154675},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1461915154675},{"_id":"themes/landscape/package.json","shasum":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1461915154675},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1461915154665},{"_id":"themes/landscape/layout/_partial/post/share.ejs","shasum":"bf805580001ed91ce30009c6a175408e855b05cd","modified":1461915154665},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1461915154675},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"2834870661e490775f9154d71638bfdc72e640a6","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"c62fde8c2ce9b382b75b37ee95ad25b27f33dc11","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"8d971a00e644a600179b04815688d188f094012e","modified":1461915154675},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"05da1b8f4859761dc60bca40b8682f167e350742","modified":1461915154675},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1461915154675},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1461915154675},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461915154685},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"c41825c0bc5e483eb0facd36a487c5b3905ef789","modified":1461915154675},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461915154685},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461915154685},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461915154685},{"_id":"themes/landscape/source/css/images/bali.jpg","shasum":"428a2e76e81c5fb46cca1094ff8360fc7917a40e","modified":1461915154685},{"_id":"themes/landscape/source/css/style.styl","shasum":"7fa59ef4cb4145a5b722a3917a7a4f78c447f9a9","modified":1461915154685},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461915154685},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461915154685},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461915154685},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1461915154685},{"_id":"themes/landscape/source/js/script.js","shasum":"178400a1334ab7c2f285c7d9f8522d3dc566d3ac","modified":1461915154695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1461915154695},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461915154685},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"a275426daefd3716c53561fad121d258a7f05b47","modified":1461915154685},{"_id":"public/img/9.jpg","modified":1511873837938,"shasum":"cdff84d9e4e22a0a47d1da3836a98de324a21207"},{"_id":"public/img/8.jpg","modified":1511873837938,"shasum":"d03147c9f2c9893ce7869ea3cf89c2c50b8b0293"},{"_id":"public/img/7.jpg","modified":1511873837954,"shasum":"18f88d67be1400142972688b6de0c3c7c71e4a1e"},{"_id":"public/img/6.jpg","modified":1511873837954,"shasum":"ec22db9cd8e79798a090d72d1028e4c352a13f65"},{"_id":"public/img/5.jpg","modified":1511873837970,"shasum":"5925ef05a4c0ec62d600c2a0d303700ab7d1f7b6"},{"_id":"public/img/4.jpg","modified":1511873837970,"shasum":"b254c237dbc596dc580456dc71bad2ddb7962aa9"},{"_id":"public/img/2.jpg","modified":1511873837985,"shasum":"c94147230ee35a0671cb4f3d69f8ef3f7a9ace42"},{"_id":"public/img/1.jpg","modified":1511873837985,"shasum":"7dc3218733ea0255b7e4eac4c102527892f546fa"},{"_id":"public/avatar/tom.jpg","modified":1511873837985,"shasum":"321e5aa23d29ffea43f3c9114123506be052e6cf"},{"_id":"public/js/script.js","modified":1511873838001,"shasum":"b6ef4655ba3b648b607e3a80a82d5cc3107ba257"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1511873838001,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1511873838016,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1511873838016,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1511873838016,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1511873838016,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1511873838016,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1511873838032,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1511873838032,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1511873838032,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1511873838048,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1511873838048,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1511873838063,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1511873838063,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1511873838079,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1511873838079,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1511873838859,"shasum":"9950f101f42e8160df8ae3b95934ed42b05dabf0"},{"_id":"public/css/images/bali.jpg","modified":1511873839093,"shasum":"428a2e76e81c5fb46cca1094ff8360fc7917a40e"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1511873839093,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1511873839093,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1511873839108,"shasum":"a275426daefd3716c53561fad121d258a7f05b47"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1511873839124,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1511873839140,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2017/01/24/cjajmn9t30007gg1kos8bvv8w/index.html","modified":1511873839218,"shasum":"42626e90ed2a13e38eb4f7bf9103ceac79bb9508"},{"_id":"public/2016/05/24/cjajmn9so0004gg1khz6wu917/index.html","modified":1511873839249,"shasum":"89b90785b3c04664611eb49dcdb609258030449a"},{"_id":"public/2016/02/04/cjajmn9t30008gg1khplmj65u/index.html","modified":1511873839264,"shasum":"9650f8a779dd9a4d165cdab7ca28dffc55711d4c"},{"_id":"public/2016/02/03/cjajmn9s80001gg1kowfb5lr5/index.html","modified":1511873839296,"shasum":"77d8198197b66b124420607d199fa1db3d80a05c"},{"_id":"public/2015/12/24/cjajmn9t3000bgg1kej0p9m3u/index.html","modified":1511873839311,"shasum":"f43488b1db171e5648b3dbe25f144a3d0b61e9b2"},{"_id":"public/2015/11/05/cjajmn9tj000igg1krhvi02ur/index.html","modified":1511873839327,"shasum":"1d795d8b437858a1f217dab81744e25bac2c9032"},{"_id":"public/2015/10/30/cjajmn9t3000egg1k05mkaidx/index.html","modified":1511873839342,"shasum":"0edfadb44027f67e136a78bd6101448ea3bf09cd"},{"_id":"public/2015/10/30/cjajmn9tj000ggg1k8la2sxet/index.html","modified":1511873839358,"shasum":"af179eb9ad738f6000c5bcf110142343f341ac50"},{"_id":"public/2015/10/15/cjajmn9qx0000gg1k6yr4jhgj/index.html","modified":1511873839374,"shasum":"1a21c1c2c9cfdf6ea096935f278983b1e05536fb"},{"_id":"public/archives/index.html","modified":1511873839405,"shasum":"c657aa7551d685ea9f86089561109891bda22946"},{"_id":"public/archives/2015/index.html","modified":1511873839436,"shasum":"e1f1b3a3cad684eedee4eff27ada25f8be8a6d38"},{"_id":"public/archives/2015/10/index.html","modified":1511873839436,"shasum":"e5f899e687c47173241e13a9b7fa41c6c77b7b19"},{"_id":"public/archives/2015/11/index.html","modified":1511873839452,"shasum":"43ef123a9443beabcf8ad676df4802aa370fba15"},{"_id":"public/archives/2015/12/index.html","modified":1511873839452,"shasum":"7497c5b5b69e11d86d752105b0d44fccc20efeae"},{"_id":"public/archives/2016/index.html","modified":1511873839467,"shasum":"f7657833dce4e552f0438485a483948e987708d8"},{"_id":"public/archives/2016/02/index.html","modified":1511873839467,"shasum":"6c966c89eb1d8562254da8b457e057de2426a927"},{"_id":"public/archives/2016/05/index.html","modified":1511873839483,"shasum":"403a279e5fa8b3cff7c736cabd684250dccd8fd4"},{"_id":"public/archives/2017/index.html","modified":1511873839483,"shasum":"e8c815c6459171a5e3ac548ed0c9f3cbe896cb5c"},{"_id":"public/archives/2017/01/index.html","modified":1511873839498,"shasum":"5b76a261b38c68159e27575a355f3ef4e066e8b6"},{"_id":"public/index.html","modified":1511873839514,"shasum":"8055ba1c565d3035b5008a3d3052a00b981c6f10"},{"_id":"public/tags/Android-training-翻译/index.html","modified":1511873839530,"shasum":"79256631c0dd1509e55bf3edc1dccee6bedc4564"},{"_id":"public/tags/电影人生/index.html","modified":1511873839530,"shasum":"dfeebb288097e6aba8bdd45e4930caf74be27c23"},{"_id":"public/tags/游戏/index.html","modified":1511873839545,"shasum":"37ef2cababeb6837696d3eca5a169f48349c50b8"},{"_id":"public/tags/感悟/index.html","modified":1511873839545,"shasum":"a6b08dc4103fd87d5bc26bb08a8920fdd5a9f3cb"}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"hexo","title":"Hexo使用笔记（一）","date":"2015-10-15T12:12:22.000Z","_content":"\n使用hexo的初衷很简单，别人家的博客系统要么界面low逼要么内容low逼，一旦有运营介入肯定就有广告。个人并不反对广告，但对于强插的中插广告或者大条幅的广告简直这种强奸眼球的做法是不能忍的。而且更多的目的是边学边用，深入浅出的用一个工具，比直接硬啃html+js+css+balalala....好玩的多。当时选择做程序员，图的就是好玩嘛~\n\n## Hexo简介\n\nHexo官网的一句概括：（Hexo官网网址：https://hexo.io/）\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用[Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n**Hexo的本质就是工具集成，集Markdown渲染、插件开发与远程部署的一个炫酷工具。**用来做一个简单优雅的静态博客就非常适合，如果想要炫酷到没朋友请用WordPress~\n\n顺便贴下作者的一篇博客感受下这位ACG爱好者的才（dou）气（bi）：[Hexo 颯爽登場！](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n\n## Hexo安装\n\n首先，你得有个.....\n不用女朋友啦别哭，就这些：\n[Node.js](http://nodejs.org/)\n[Git](http://git-scm.com/)\n\nOK,装完后我们就帅气的用以下命令解决：\n`$npm install -g hexo-cli`\n\n然后就搞定了，简直不能再帅...\n\n## Hexo 的HelloWorld\n\n由于先不急着了解Hexo的配置文件与目录结构，先把基本过程过一遍先~工具是先学会使用才去研究原理滴~\n```\n##建站\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n##生成\n$ hexo generate\n$ npm install hexo-server --save\n$ hexo server\n```\n\n在浏览器中打开[http://127.0.0.1:4000](http://127.0.0.1:4000),~duang~\nPS：重点说下hexo-server这个坑，由于网上很多教程是针对hexo 2.0，所以3.0以上的童鞋注意下。\n\n## Hexo 部署到gitcafe\nOK，本地环境妥妥的了~就可以考虑部署了。我选择gitcafe只因为速度问题大家懂得~\n\n1. 注册gitcafe账号\n这个自己整....\n2. 新建一个与自己用户名相同名字的项目\n不要像我一样为了炫酷取个与用户名不同的项目...否则会很麻烦。gitcafe的pages服务默认就是以用户名同名的项目。\n3. 生成gitcafe的SSH key\n这样你可以在~/.ssh下看到gitcafe，gitcafe.pub了\n```\n$ mkdir ~/.ssh\n$ ssh-keygen -t rsa -C \"你的邮箱@xxx.com\" -f ~/.ssh/gitcafe\n```\n4. 连接配置\n首先创建一个配置文件先~\t然后加上以下语句：\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n```\n$touch ~/.ssh/config\n```\n\n5. gitcafe上设置部署key\n将~/.ssh/文件夹下的GitCafe.pub中的内容复制到公钥框中即可。\n6. 修改_config.yml\n在末尾加上以下语句\n```\ndeploy:\n  type: git\n  repo: https://gitcafe.com/JHuan/JHuan.git,gitcafe-pages\n  ```\n  在hexo 3.0 type以后就只有git了没有github和gitcafe之分~\n7. 部署！\n终于等到你我还好没放弃\n`hexo d`\n如果一切顺利，你可以通过http://你的用户名.gitcafe.io访问你的博客了！\n\n\n## 那些坑\n如果你一切都顺利那祝贺你可以开始愉快的和hexo玩耍了\n如果你也不幸跟我一样踩坑了，看看以下有没能够帮助你的：\n\n1. 记得挂代理....\n感谢党感谢人民感谢GFW连npm都要帮我们墙掉那是有多爱我们。\n`$npm config set proxy=http://192.168.1.1:8080 `\n具体端口和代理地址请自行替换哈\n在公司办公网的童鞋记得ssh和git bash也要挂上代理哈\n\n2. 请勿在cmd中使用hexo\n如果你也跟我一样还在悲催的使用windows做开发，请记得在gitbash中使用hexo。如若不信你可以试下hexo deploy。\n\n\n","source":"_posts/Hexo使用笔记（一）.md","raw":"layout: hexo\ntitle: Hexo使用笔记（一）\ndate: 2015-10-15 20:12:22\ntags:\n---\n\n使用hexo的初衷很简单，别人家的博客系统要么界面low逼要么内容low逼，一旦有运营介入肯定就有广告。个人并不反对广告，但对于强插的中插广告或者大条幅的广告简直这种强奸眼球的做法是不能忍的。而且更多的目的是边学边用，深入浅出的用一个工具，比直接硬啃html+js+css+balalala....好玩的多。当时选择做程序员，图的就是好玩嘛~\n\n## Hexo简介\n\nHexo官网的一句概括：（Hexo官网网址：https://hexo.io/）\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用[Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n**Hexo的本质就是工具集成，集Markdown渲染、插件开发与远程部署的一个炫酷工具。**用来做一个简单优雅的静态博客就非常适合，如果想要炫酷到没朋友请用WordPress~\n\n顺便贴下作者的一篇博客感受下这位ACG爱好者的才（dou）气（bi）：[Hexo 颯爽登場！](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n\n## Hexo安装\n\n首先，你得有个.....\n不用女朋友啦别哭，就这些：\n[Node.js](http://nodejs.org/)\n[Git](http://git-scm.com/)\n\nOK,装完后我们就帅气的用以下命令解决：\n`$npm install -g hexo-cli`\n\n然后就搞定了，简直不能再帅...\n\n## Hexo 的HelloWorld\n\n由于先不急着了解Hexo的配置文件与目录结构，先把基本过程过一遍先~工具是先学会使用才去研究原理滴~\n```\n##建站\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n##生成\n$ hexo generate\n$ npm install hexo-server --save\n$ hexo server\n```\n\n在浏览器中打开[http://127.0.0.1:4000](http://127.0.0.1:4000),~duang~\nPS：重点说下hexo-server这个坑，由于网上很多教程是针对hexo 2.0，所以3.0以上的童鞋注意下。\n\n## Hexo 部署到gitcafe\nOK，本地环境妥妥的了~就可以考虑部署了。我选择gitcafe只因为速度问题大家懂得~\n\n1. 注册gitcafe账号\n这个自己整....\n2. 新建一个与自己用户名相同名字的项目\n不要像我一样为了炫酷取个与用户名不同的项目...否则会很麻烦。gitcafe的pages服务默认就是以用户名同名的项目。\n3. 生成gitcafe的SSH key\n这样你可以在~/.ssh下看到gitcafe，gitcafe.pub了\n```\n$ mkdir ~/.ssh\n$ ssh-keygen -t rsa -C \"你的邮箱@xxx.com\" -f ~/.ssh/gitcafe\n```\n4. 连接配置\n首先创建一个配置文件先~\t然后加上以下语句：\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n```\n$touch ~/.ssh/config\n```\n\n5. gitcafe上设置部署key\n将~/.ssh/文件夹下的GitCafe.pub中的内容复制到公钥框中即可。\n6. 修改_config.yml\n在末尾加上以下语句\n```\ndeploy:\n  type: git\n  repo: https://gitcafe.com/JHuan/JHuan.git,gitcafe-pages\n  ```\n  在hexo 3.0 type以后就只有git了没有github和gitcafe之分~\n7. 部署！\n终于等到你我还好没放弃\n`hexo d`\n如果一切顺利，你可以通过http://你的用户名.gitcafe.io访问你的博客了！\n\n\n## 那些坑\n如果你一切都顺利那祝贺你可以开始愉快的和hexo玩耍了\n如果你也不幸跟我一样踩坑了，看看以下有没能够帮助你的：\n\n1. 记得挂代理....\n感谢党感谢人民感谢GFW连npm都要帮我们墙掉那是有多爱我们。\n`$npm config set proxy=http://192.168.1.1:8080 `\n具体端口和代理地址请自行替换哈\n在公司办公网的童鞋记得ssh和git bash也要挂上代理哈\n\n2. 请勿在cmd中使用hexo\n如果你也跟我一样还在悲催的使用windows做开发，请记得在gitbash中使用hexo。如若不信你可以试下hexo deploy。\n\n\n","slug":"Hexo使用笔记（一）","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9qx0000gg1k6yr4jhgj"},{"layout":"hexo","title":"【Android training】高效展示你的Bitmap（上）","date":"2016-02-03T08:02:33.000Z","_content":"\n参考文献：\n[Android Training : Displaying Bitmaps Efficiently](http://developer.android.com/training/displaying-bitmaps/index.html)\n\n前言:Bitmap无疑是内存大户之一，稍不谨慎，虚拟机抛出个OOM（OutofMemoryError）会让你很抓狂。OOM的定位和调试是个头痛的问题，会有专门的章节讲解这一问题，在此之前，要使用正确的体位来把玩我们的bitmap！ o(￣ε￣*)\n\n## 高效加载大图\n现实中，咱们的安卓设备可能会接触到各种形状和大小不同的图片。在一些情况中图片大小大于咱们的手机屏幕，而且在大多数情况下我们不需要这么大的图片展示给用户看，那么就很有必要采取必要的措施来避免直接加载这么大的图片。\n\n### 读取图片尺寸和类型\n[BitmapFactory](http://developer.android.com/reference/android/graphics/BitmapFactory.html) 类提供了一系列解析bitmap的方法 (decodeByteArray(), decodeFile(), decodeResource(), etc.)。这些方法是非常容易导致OOM的！你可以通过BitmapFactory.Options来改变加载选项，设置inJustDecodeBounds 选项为true 可以有效避免解析bitmap时的内存分配，来达到只读取图片信息而不是为了显示图片，阔以避免不必要的内存分配！\n\n```\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inJustDecodeBounds = true;\nBitmapFactory.decodeResource(getResources(), R.id.myimage, options);\nint imageHeight = options.outHeight;\nint imageWidth = options.outWidth;\nString imageType = options.outMimeType;\n```\n\n### 加载个适配当前需求大小的图片到内存中去吧\n\n好，通过上一步知道了图片的尺寸，我们开始可以决定加载一个怎样的图片了，是原图就可以？还是要做个压缩后的图片（原文是subsampled version卧槽好专业）？别急，先来考虑下以下因素：\n\n+ 估算下原图加载所需分配的内存大小\n+ 应用内适合分多少内存给这张图片\n+ 目标view的尺寸\n+ 屏幕尺寸和屏幕密度\n\n如果仔细评估过还是加载个压缩后的图片比较好，那可以通过BitmapFactory.Options的inSampleSize可以设置采样率，以下是个栗子：\n```\npublic static int calculateInSampleSize(\n            BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    // Raw height and width of image\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while ((halfHeight / inSampleSize) > reqHeight\n                && (halfWidth / inSampleSize) > reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}\n```\n\n> 注意：采用2的n次幂是因为解码器会用一个向下取整2的n次幂的常量值，[inSampleSize][1]相关文档解释了这一点。\n\n\n\n\n  [1]: http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize\n  \n## 在非UI线程里处理bitmap\n\n很显然，在UI线程里处理bitmap可是会被老板骂的╮(╯▽╰)╭，读取图片、图像处理涉及到磁盘访问以及图像处理算法复杂度，这些都是耗时操作，一不小心就引起ANR的哦~so，来看看使用什么体位解决这个问题！\n\n### 用AsyncTask吧！\n[AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html)为开发者提供了处理后台耗时操作很便利的解决方案，以下就是个栗子：\n```\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n    private final WeakReference<ImageView> imageViewReference;\n    private int data = 0;\n\n    public BitmapWorkerTask(ImageView imageView) {\n        // Use a WeakReference to ensure the ImageView can be garbage collected\n        imageViewReference = new WeakReference<ImageView>(imageView);\n    }\n\n    // Decode image in background.\n    @Override\n    protected Bitmap doInBackground(Integer... params) {\n        data = params[0];\n        return decodeSampledBitmapFromResource(getResources(), data, 100, 100));\n    }\n\n    // Once complete, see if ImageView is still around and set bitmap.\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (imageViewReference != null && bitmap != null) {\n            final ImageView imageView = imageViewReference.get();\n            if (imageView != null) {\n                imageView.setImageBitmap(bitmap);\n            }\n        }\n    }\n}\n```\n\n对ImageView的弱引用可以保证AsyncTask不会阻挠ImageView的垃圾回收（不然就有可能内存泄露啦），由于不能保证后台任务完成时ImageView还在，所以在onPostExecute时要检查ImageView还在不。启动这个异步任务灰常简单，只要以下代码：\n```\npublic void loadBitmap(int resId, ImageView imageView) {\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);\n}\n```\n\n### 处理同步问题\n\n但是，一些常见的View（譬如ListView）就这么用AsyncTask会有一系列的问题。ListView在滚动时，为了节省内存，会回收掉子View的内存。so，如果你没想太多，ListView的每一个Item直接上AsyncTask加载图片，可能导致A   子View加载图片的时候用户滚动ListView，A   子View被回收了并且其被回收的内存恰好分配给了B子View，同时加载图片异步任务还在继续，正要显示时所持有的内存引用恰好指向了B 子View，那么B子View就会错位显示A子View该显示的图片啦。更糟糕的是异步任务可是没办法保证按顺序显示图片的。\n\n还好有一篇博客[ Multithreading for Performance ](http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html)提出了解决方案，该类继承自Drawbale类，存放一个指向BitmapWorkerTask的弱引用，当异步任务完成时图像就会显示。\n\n```\nstatic class AsyncDrawable extends BitmapDrawable {\n    private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;\n\n    public AsyncDrawable(Resources res, Bitmap bitmap,\n            BitmapWorkerTask bitmapWorkerTask) {\n        super(res, bitmap);\n        bitmapWorkerTaskReference =\n            new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);\n    }\n\n    public BitmapWorkerTask getBitmapWorkerTask() {\n        return bitmapWorkerTaskReference.get();\n    }\n}\n```\n\n我们可以用这种姿势调用：\n\n```\npublic void loadBitmap(int resId, ImageView imageView) {\n    if (cancelPotentialWork(resId, imageView)) {\n        final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n        final AsyncDrawable asyncDrawable =\n                new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n        imageView.setImageDrawable(asyncDrawable);\n        task.execute(resId);\n    }\n}\n```\n\n这个cancelPotentialWork方法主要检查这个imageView是否已经和一个已经在执行的异步任务绑定了，如果是的话，会尝试取消这个任务\n\n```\npublic static boolean cancelPotentialWork(int data, ImageView imageView) {\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n    if (bitmapWorkerTask != null) {\n        final int bitmapData = bitmapWorkerTask.data;\n        // If bitmapData is not yet set or it differs from the new data\n        if (bitmapData == 0 || bitmapData != data) {\n            // Cancel previous task\n            bitmapWorkerTask.cancel(true);\n        } else {\n            // The same work is already in progress\n            return false;\n        }\n    }\n    // No task associated with the ImageView, or an existing task was cancelled\n    return true;\n    \n   \n}\n\n private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n   if (imageView != null) {\n       final Drawable drawable = imageView.getDrawable();\n       if (drawable instanceof AsyncDrawable) {\n           final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           return asyncDrawable.getBitmapWorkerTask();\n       }\n    }\n    return null;\n}\n```\n\n最后一步就是更新BitmapWorkerTask 里的onPostExecute()，加上任务是否取消以及当前任务是否匹配当前ImageView：\n\n```\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n    ...\n\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (isCancelled()) {\n            bitmap = null;\n        }\n\n        if (imageViewReference != null && bitmap != null) {\n            final ImageView imageView = imageViewReference.get();\n            final BitmapWorkerTask bitmapWorkerTask =\n                    getBitmapWorkerTask(imageView);\n            if (this == bitmapWorkerTask && imageView != null) {\n                imageView.setImageBitmap(bitmap);\n            }\n        }\n    }\n}\n```\n\n以上所说的解决方案适用于ListView,GridView等会回收子View的组件。只需简单的调用loadBitmap，就可以放心的加载图片啦！\n\n","source":"_posts/高效展示你的Bitmap（上）.md","raw":"layout: hexo\ntitle: 【Android training】高效展示你的Bitmap（上）\ndate: 2016-2-3 16:02:33\ntags: Android training 翻译\n---\n\n参考文献：\n[Android Training : Displaying Bitmaps Efficiently](http://developer.android.com/training/displaying-bitmaps/index.html)\n\n前言:Bitmap无疑是内存大户之一，稍不谨慎，虚拟机抛出个OOM（OutofMemoryError）会让你很抓狂。OOM的定位和调试是个头痛的问题，会有专门的章节讲解这一问题，在此之前，要使用正确的体位来把玩我们的bitmap！ o(￣ε￣*)\n\n## 高效加载大图\n现实中，咱们的安卓设备可能会接触到各种形状和大小不同的图片。在一些情况中图片大小大于咱们的手机屏幕，而且在大多数情况下我们不需要这么大的图片展示给用户看，那么就很有必要采取必要的措施来避免直接加载这么大的图片。\n\n### 读取图片尺寸和类型\n[BitmapFactory](http://developer.android.com/reference/android/graphics/BitmapFactory.html) 类提供了一系列解析bitmap的方法 (decodeByteArray(), decodeFile(), decodeResource(), etc.)。这些方法是非常容易导致OOM的！你可以通过BitmapFactory.Options来改变加载选项，设置inJustDecodeBounds 选项为true 可以有效避免解析bitmap时的内存分配，来达到只读取图片信息而不是为了显示图片，阔以避免不必要的内存分配！\n\n```\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inJustDecodeBounds = true;\nBitmapFactory.decodeResource(getResources(), R.id.myimage, options);\nint imageHeight = options.outHeight;\nint imageWidth = options.outWidth;\nString imageType = options.outMimeType;\n```\n\n### 加载个适配当前需求大小的图片到内存中去吧\n\n好，通过上一步知道了图片的尺寸，我们开始可以决定加载一个怎样的图片了，是原图就可以？还是要做个压缩后的图片（原文是subsampled version卧槽好专业）？别急，先来考虑下以下因素：\n\n+ 估算下原图加载所需分配的内存大小\n+ 应用内适合分多少内存给这张图片\n+ 目标view的尺寸\n+ 屏幕尺寸和屏幕密度\n\n如果仔细评估过还是加载个压缩后的图片比较好，那可以通过BitmapFactory.Options的inSampleSize可以设置采样率，以下是个栗子：\n```\npublic static int calculateInSampleSize(\n            BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    // Raw height and width of image\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while ((halfHeight / inSampleSize) > reqHeight\n                && (halfWidth / inSampleSize) > reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}\n```\n\n> 注意：采用2的n次幂是因为解码器会用一个向下取整2的n次幂的常量值，[inSampleSize][1]相关文档解释了这一点。\n\n\n\n\n  [1]: http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize\n  \n## 在非UI线程里处理bitmap\n\n很显然，在UI线程里处理bitmap可是会被老板骂的╮(╯▽╰)╭，读取图片、图像处理涉及到磁盘访问以及图像处理算法复杂度，这些都是耗时操作，一不小心就引起ANR的哦~so，来看看使用什么体位解决这个问题！\n\n### 用AsyncTask吧！\n[AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html)为开发者提供了处理后台耗时操作很便利的解决方案，以下就是个栗子：\n```\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n    private final WeakReference<ImageView> imageViewReference;\n    private int data = 0;\n\n    public BitmapWorkerTask(ImageView imageView) {\n        // Use a WeakReference to ensure the ImageView can be garbage collected\n        imageViewReference = new WeakReference<ImageView>(imageView);\n    }\n\n    // Decode image in background.\n    @Override\n    protected Bitmap doInBackground(Integer... params) {\n        data = params[0];\n        return decodeSampledBitmapFromResource(getResources(), data, 100, 100));\n    }\n\n    // Once complete, see if ImageView is still around and set bitmap.\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (imageViewReference != null && bitmap != null) {\n            final ImageView imageView = imageViewReference.get();\n            if (imageView != null) {\n                imageView.setImageBitmap(bitmap);\n            }\n        }\n    }\n}\n```\n\n对ImageView的弱引用可以保证AsyncTask不会阻挠ImageView的垃圾回收（不然就有可能内存泄露啦），由于不能保证后台任务完成时ImageView还在，所以在onPostExecute时要检查ImageView还在不。启动这个异步任务灰常简单，只要以下代码：\n```\npublic void loadBitmap(int resId, ImageView imageView) {\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);\n}\n```\n\n### 处理同步问题\n\n但是，一些常见的View（譬如ListView）就这么用AsyncTask会有一系列的问题。ListView在滚动时，为了节省内存，会回收掉子View的内存。so，如果你没想太多，ListView的每一个Item直接上AsyncTask加载图片，可能导致A   子View加载图片的时候用户滚动ListView，A   子View被回收了并且其被回收的内存恰好分配给了B子View，同时加载图片异步任务还在继续，正要显示时所持有的内存引用恰好指向了B 子View，那么B子View就会错位显示A子View该显示的图片啦。更糟糕的是异步任务可是没办法保证按顺序显示图片的。\n\n还好有一篇博客[ Multithreading for Performance ](http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html)提出了解决方案，该类继承自Drawbale类，存放一个指向BitmapWorkerTask的弱引用，当异步任务完成时图像就会显示。\n\n```\nstatic class AsyncDrawable extends BitmapDrawable {\n    private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;\n\n    public AsyncDrawable(Resources res, Bitmap bitmap,\n            BitmapWorkerTask bitmapWorkerTask) {\n        super(res, bitmap);\n        bitmapWorkerTaskReference =\n            new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);\n    }\n\n    public BitmapWorkerTask getBitmapWorkerTask() {\n        return bitmapWorkerTaskReference.get();\n    }\n}\n```\n\n我们可以用这种姿势调用：\n\n```\npublic void loadBitmap(int resId, ImageView imageView) {\n    if (cancelPotentialWork(resId, imageView)) {\n        final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n        final AsyncDrawable asyncDrawable =\n                new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n        imageView.setImageDrawable(asyncDrawable);\n        task.execute(resId);\n    }\n}\n```\n\n这个cancelPotentialWork方法主要检查这个imageView是否已经和一个已经在执行的异步任务绑定了，如果是的话，会尝试取消这个任务\n\n```\npublic static boolean cancelPotentialWork(int data, ImageView imageView) {\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n    if (bitmapWorkerTask != null) {\n        final int bitmapData = bitmapWorkerTask.data;\n        // If bitmapData is not yet set or it differs from the new data\n        if (bitmapData == 0 || bitmapData != data) {\n            // Cancel previous task\n            bitmapWorkerTask.cancel(true);\n        } else {\n            // The same work is already in progress\n            return false;\n        }\n    }\n    // No task associated with the ImageView, or an existing task was cancelled\n    return true;\n    \n   \n}\n\n private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n   if (imageView != null) {\n       final Drawable drawable = imageView.getDrawable();\n       if (drawable instanceof AsyncDrawable) {\n           final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           return asyncDrawable.getBitmapWorkerTask();\n       }\n    }\n    return null;\n}\n```\n\n最后一步就是更新BitmapWorkerTask 里的onPostExecute()，加上任务是否取消以及当前任务是否匹配当前ImageView：\n\n```\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n    ...\n\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (isCancelled()) {\n            bitmap = null;\n        }\n\n        if (imageViewReference != null && bitmap != null) {\n            final ImageView imageView = imageViewReference.get();\n            final BitmapWorkerTask bitmapWorkerTask =\n                    getBitmapWorkerTask(imageView);\n            if (this == bitmapWorkerTask && imageView != null) {\n                imageView.setImageBitmap(bitmap);\n            }\n        }\n    }\n}\n```\n\n以上所说的解决方案适用于ListView,GridView等会回收子View的组件。只需简单的调用loadBitmap，就可以放心的加载图片啦！\n\n","slug":"高效展示你的Bitmap（上）","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9s80001gg1kowfb5lr5"},{"layout":"hexo","title":"谈谈那个大圣的背影","date":"2016-05-24T12:35:45.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;对不起又要炒旧饭了，改不掉喜旧厌新的毛病没办法。\n\n![](/img/1.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;这时候拎出来讲这部电影我也不卖关子，还是要厚脸皮可耻的承认终于在25周岁来临之际终于迎来了第一次失恋，对，之前的青春是被狗吃了，对，之前的青春是屎。这个怎么吐槽倒也不在乎了，继续琢磨怎么过好日子和如何控制好烂成渣的情绪才是关键，在此之前，会有段漫长而傻逼的时期，认真看几部电影和书慢慢熬呗。\n\n&nbsp;&nbsp;&nbsp;&nbsp;讲起大话西游，已经是数不清的文艺青年评到烂了，凭我这种连电影爱好者都算不上的水平，自然是发掘不出什么更好的梗了，也不会将剧情讲成悬案，也懒得追究这部电影到底涉及到几个平行空间以及关于轮回的探讨。作为一个普通到庸俗的人，也是经历过第一次看哈哈大笑，第二次看沉默不语，第三次看泪流满面的庸俗过程。\n\n&nbsp;&nbsp;&nbsp;&nbsp;刚失恋时在发烧，烧了三天，根本没心情去治，难得可以让脑子休息一下不去思索太多关于现实的事，于是一遍又一遍的看，也略读了一下各种影评，矫情的也读，严肃的也读，然后继续躺在床上，一遍又一遍的看。严格来说，也就是看最后一个片段。\n\n&nbsp;&nbsp;&nbsp;&nbsp;对，就是这个片段。\n![](/img/2.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;据说这个剧本也是边拍边写的，被西影厂说成文化垃圾，当年的市场反应当然也不好，很小的时候就听过了，当时字都识不全整天盯着六小龄童哪瞧得起这个多毛症的孙悟空，应该都只是瞟了一眼，别提看到最后一幕。第二次看时也是大概感受下像条狗的悲哀，但在那个青春骚动喜欢无病呻吟的年华都没看上这个片段。也是不得不庸俗的承认有些事就是经历过才能感受，如果青春期的我看到我现在这个loser样会不会狠狠踹上一脚我不知道，如果他真能出现在我面前，我也只能对他说：兄弟，对不起，不是我想的。\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;如果要评选结尾处理的最好的电影，大话西游在我的榜单上是可以排第二的（第一是七宗罪和禁闭岛齐名不用争），如果把这个结尾干掉或许大话西游也只是个简单的无厘头喜剧。虽然这部电影并不能做到一点也不浪费镜头（虽然我也没找到明显的浪费），但最后这一组大圣一句台词都没有的镜头，给了我们最大的想象空间和最多的感触。\n\n&nbsp;&nbsp;&nbsp;&nbsp;其实大圣不像狗的，夕阳武士那句话只是周星驰对自己落寞的过去说的。至尊宝承载了三个轮回的记忆，在变成大圣之前他卷入了一个他爱的女人和爱他的女人的伪三角恋事故中，有人说其实最牛逼的其实还是佛祖观音，安排这一次次转世，大圣再牛逼也是一个表演的马骝仔。他演的只是一个实实在在的人而已，不是神仙，不是妖怪，七情六欲爱恨情仇，他都有过。直到他戴上金箍向观音许诺放弃人世间所有恩怨时他相信会忘掉这一切，可惜并没有孟婆汤帮他真正忘却。他还是带上了紫霞仙子的手链，在紫霞死时暴怒，在最后一次转世中看到紫霞的转世对峙至尊宝的转世。\n\n![](/img/4.jpg)\n\n![](/img/5.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;他想，这时候我能做的无非就是让他们幸福了吧。\n\n&nbsp;&nbsp;&nbsp;&nbsp;所有回忆和感情就在这一吻和一句我爱你之后，大圣转身离开，留下了个落寞的背影。\n\n![](/img/6.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;夕阳武士当然是不知道这些的，像条狗或许是无意的玩笑或者讽刺，被偏爱的总有恃无恐嘛，只是紫霞的转世还有些许疑惑，她在哪见过这个背影？\n\n![](/img/7.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;大圣只是在走远了的时候，回头认真望了一眼。\n\n![](/img/8.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;然后再也没有回头，继续踏上漫长的西行之路\n\n![](/img/9.jpg)\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;人终有喜怒哀乐爱恨情仇，年少时我们能无视所谓的现实敢爱敢恨，成人时畏惧失去而缄口只谈利弊。我想这就是只有少数人才能成功的原因之一吧，现实和理想的差距不仅仅是算计的能力的差距，也需要感性的直觉来推动。光是感性和理性的平衡一般人都很难做到了，何况其他更为艰难的坎？出于对死与失去的畏惧，我们安于平庸且为苟活，对于失去的恋情说没关系天涯无处何芳草，嘲笑那些为一些屁事就牺牲的人，尊严值几毛钱？然后继续像条狗一样头也不回继续西行之路，偶尔也会回头怀念一下过去，继而继续嘲笑自己的愚蠢念头，告诉自己要理性。\n\n&nbsp;&nbsp;&nbsp;&nbsp;这世上有很多很多的大道理，几乎都有它的反面论证，反正都是人说出来的，被人推翻不是啥稀奇事。反正人都要归为尘土，叨逼这些道理也是给自己化成尘土一个解释，活的越久解释越充实越经得起别人推敲进而成为别人的模范，获取到归为尘土后也没法享有的荣耀。我并不反感这些大道理，追求自己想要的生活和意义很伟大，我只是反感恶意的欺骗和“为你好”来实现自己的目的，人活这一遭已经很不容易，少一点套路，多一点真诚岂不乐哉，为何还要互相伤害？为何需要证明你的道理比我好？为何要用我的痛苦换取你的幸福？还痛心疾首的说是“为我好”？有必要吗？\n\n&nbsp;&nbsp;&nbsp;&nbsp;有些事终究可能没有答案，或许也不需要知道，所以就他妈的继续往前走吧，相信他妈的时间会冲淡一切，继续像蝼蚁般苟活吧。\n\n\n\n\n\n\n","source":"_posts/谈谈那个大圣的背影.md","raw":"layout: hexo\ntitle: 谈谈那个大圣的背影\ndate: 2016-5-24 20:35:45\ntags: 电影人生\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;对不起又要炒旧饭了，改不掉喜旧厌新的毛病没办法。\n\n![](/img/1.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;这时候拎出来讲这部电影我也不卖关子，还是要厚脸皮可耻的承认终于在25周岁来临之际终于迎来了第一次失恋，对，之前的青春是被狗吃了，对，之前的青春是屎。这个怎么吐槽倒也不在乎了，继续琢磨怎么过好日子和如何控制好烂成渣的情绪才是关键，在此之前，会有段漫长而傻逼的时期，认真看几部电影和书慢慢熬呗。\n\n&nbsp;&nbsp;&nbsp;&nbsp;讲起大话西游，已经是数不清的文艺青年评到烂了，凭我这种连电影爱好者都算不上的水平，自然是发掘不出什么更好的梗了，也不会将剧情讲成悬案，也懒得追究这部电影到底涉及到几个平行空间以及关于轮回的探讨。作为一个普通到庸俗的人，也是经历过第一次看哈哈大笑，第二次看沉默不语，第三次看泪流满面的庸俗过程。\n\n&nbsp;&nbsp;&nbsp;&nbsp;刚失恋时在发烧，烧了三天，根本没心情去治，难得可以让脑子休息一下不去思索太多关于现实的事，于是一遍又一遍的看，也略读了一下各种影评，矫情的也读，严肃的也读，然后继续躺在床上，一遍又一遍的看。严格来说，也就是看最后一个片段。\n\n&nbsp;&nbsp;&nbsp;&nbsp;对，就是这个片段。\n![](/img/2.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;据说这个剧本也是边拍边写的，被西影厂说成文化垃圾，当年的市场反应当然也不好，很小的时候就听过了，当时字都识不全整天盯着六小龄童哪瞧得起这个多毛症的孙悟空，应该都只是瞟了一眼，别提看到最后一幕。第二次看时也是大概感受下像条狗的悲哀，但在那个青春骚动喜欢无病呻吟的年华都没看上这个片段。也是不得不庸俗的承认有些事就是经历过才能感受，如果青春期的我看到我现在这个loser样会不会狠狠踹上一脚我不知道，如果他真能出现在我面前，我也只能对他说：兄弟，对不起，不是我想的。\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;如果要评选结尾处理的最好的电影，大话西游在我的榜单上是可以排第二的（第一是七宗罪和禁闭岛齐名不用争），如果把这个结尾干掉或许大话西游也只是个简单的无厘头喜剧。虽然这部电影并不能做到一点也不浪费镜头（虽然我也没找到明显的浪费），但最后这一组大圣一句台词都没有的镜头，给了我们最大的想象空间和最多的感触。\n\n&nbsp;&nbsp;&nbsp;&nbsp;其实大圣不像狗的，夕阳武士那句话只是周星驰对自己落寞的过去说的。至尊宝承载了三个轮回的记忆，在变成大圣之前他卷入了一个他爱的女人和爱他的女人的伪三角恋事故中，有人说其实最牛逼的其实还是佛祖观音，安排这一次次转世，大圣再牛逼也是一个表演的马骝仔。他演的只是一个实实在在的人而已，不是神仙，不是妖怪，七情六欲爱恨情仇，他都有过。直到他戴上金箍向观音许诺放弃人世间所有恩怨时他相信会忘掉这一切，可惜并没有孟婆汤帮他真正忘却。他还是带上了紫霞仙子的手链，在紫霞死时暴怒，在最后一次转世中看到紫霞的转世对峙至尊宝的转世。\n\n![](/img/4.jpg)\n\n![](/img/5.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;他想，这时候我能做的无非就是让他们幸福了吧。\n\n&nbsp;&nbsp;&nbsp;&nbsp;所有回忆和感情就在这一吻和一句我爱你之后，大圣转身离开，留下了个落寞的背影。\n\n![](/img/6.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;夕阳武士当然是不知道这些的，像条狗或许是无意的玩笑或者讽刺，被偏爱的总有恃无恐嘛，只是紫霞的转世还有些许疑惑，她在哪见过这个背影？\n\n![](/img/7.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;大圣只是在走远了的时候，回头认真望了一眼。\n\n![](/img/8.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;然后再也没有回头，继续踏上漫长的西行之路\n\n![](/img/9.jpg)\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;人终有喜怒哀乐爱恨情仇，年少时我们能无视所谓的现实敢爱敢恨，成人时畏惧失去而缄口只谈利弊。我想这就是只有少数人才能成功的原因之一吧，现实和理想的差距不仅仅是算计的能力的差距，也需要感性的直觉来推动。光是感性和理性的平衡一般人都很难做到了，何况其他更为艰难的坎？出于对死与失去的畏惧，我们安于平庸且为苟活，对于失去的恋情说没关系天涯无处何芳草，嘲笑那些为一些屁事就牺牲的人，尊严值几毛钱？然后继续像条狗一样头也不回继续西行之路，偶尔也会回头怀念一下过去，继而继续嘲笑自己的愚蠢念头，告诉自己要理性。\n\n&nbsp;&nbsp;&nbsp;&nbsp;这世上有很多很多的大道理，几乎都有它的反面论证，反正都是人说出来的，被人推翻不是啥稀奇事。反正人都要归为尘土，叨逼这些道理也是给自己化成尘土一个解释，活的越久解释越充实越经得起别人推敲进而成为别人的模范，获取到归为尘土后也没法享有的荣耀。我并不反感这些大道理，追求自己想要的生活和意义很伟大，我只是反感恶意的欺骗和“为你好”来实现自己的目的，人活这一遭已经很不容易，少一点套路，多一点真诚岂不乐哉，为何还要互相伤害？为何需要证明你的道理比我好？为何要用我的痛苦换取你的幸福？还痛心疾首的说是“为我好”？有必要吗？\n\n&nbsp;&nbsp;&nbsp;&nbsp;有些事终究可能没有答案，或许也不需要知道，所以就他妈的继续往前走吧，相信他妈的时间会冲淡一切，继续像蝼蚁般苟活吧。\n\n\n\n\n\n\n","slug":"谈谈那个大圣的背影","published":1,"updated":"2016-05-24T12:42:57.485Z","comments":1,"photos":[],"link":"","_id":"cjajmn9so0004gg1khz6wu917"},{"_content":"# 真相\n\n\n---\n\n每年总结这个习惯还是很难改的哈，每到年底总喜欢算算流水账，感慨下人生无常感恩下生命中遇到的人balala...倒也不是腻烦了输出鸡汤和讨厌矫情，但是今年所经历的事情流水账和矫情是无法描述了。已然接近而立之年，矫情和鸡汤只是逃避现实的手段了，知行合一、活在当下才是主旋律。但在此之前，还是很有必要定性下最近几年奠基的认知基础，对我来说才是第一步。虽说思考人生这种东西没有止境，但所谓的四十不惑在我看来只是懒得想了而已，但不能成为拖延的借口，该阐释该记录的，写下来再说。\n\n首先还是想谈谈可以囊括整篇总结的精髓的大作：《黑客帝国》三部曲。\n\n这部已经有十几年历史的电影就算是现在看来也是无比震撼的，其涵盖的哲学思维，人工智能设想，科幻场景渲染已经成为科幻电影的经典。我阅片确实很少，虽不能称其前无古人后无来者，但对于当时还是青春年少的我来说带来的震慑和影响是超过了那些经典的励志电影。其中最经典的一句话现在仍是思考问题时的黄金法则：\n\n> 什么叫真相？你怎样给真相下定义？如果你说真相就是你能感觉到的东西，你能闻到的气味，你能尝到的味道，那么这个真相就是你大脑作出反应的电子信号。\n\n由此开启了为期一年的思考：**真相真的存在吗？**\n\n直接给结论：**不存在, 真相只是证伪成本极高的一个镜像**\n\n非常引人入胜的话题，但就跟鸡与蛋的问题一样钻牛角尖并且深究起来毫无意义——除非相关紧要的利益，但就算如此也只能发现人类在命运之神面前的渺小和无奈，在黑客帝国里的展现更是让人窒息：上天遁地超人般的Neo，也只是创世神的一个棋子，用来一次次重启matrix;所谓争取到的自由的zion人民，其实早已被毁灭过数次。不说这些影响剧情的角色，只站在一个尚被matrix控制的普通人，在线头拔掉之前，他们所认为的世界的真相，会是已经被机器人控制的地底世界么？他们如果连他们的五感都不信还能信什么真相？\n\n其实站在更高的角度来看，发现这个问题确实跟鸡与蛋的问题是一样的解决思路。**真相固然存在，并且真相其实是无数个的**。更高的角度在这的严格解释就是更高的维度，假如你能像《星际穿越》的Copper一样身处五维空间，开启上帝视角看着你错综复杂的时间线，就很明显的知道真相有很多分支，并不是柯南里说的“真相只有一个”。\n\n哈哈，这个扯的有点太大，毕竟我们身处的只是三维空间而已，“真相只有一个”这种设定其实是可以成立的。五维空间的上帝可以帮我们作证（虽然我相信他老人家应该处于十维空间）。但对于我们个人来说，**真相是否就是那个证伪成本太高的那条路径呢**？从宇宙大爆炸假说，薄**事件到底你为啥没升职恋人为何离开你，都会有解释、证据、数据等强有力的证明来让你信服：这些就是真相。你要质疑，可以，找到更有力的证据把这些证据推翻，然后如此循环，越到后面取证越困难，所消耗的时间或者金钱已经不足于证伪，你还会怀疑吗？就算还会怀疑，你能做的只有怀疑了：毕竟你个人再也无法证伪了——除非你也来个愚公移山计划。这还是对于愿意打破砂锅的人，对于不愿深究的人呢？也就是持有所谓的“相信眼前所见为实“的人，对他们来说证伪成本需要高于”亲眼所见“是不是就无法接受了呢？\n\n既然证伪成本随着深究的程度而无限提高，于是对于大多数的我们来说，获取真相的低成本途径就剩下了有限的两条：\n**1.相信权威  \n2.相信大多数。**\n\n够用了，既然不能保证绝对正确，找个大多数时候正确然后就算出错会有相当一堆人跟你一样错至少可以减少你的心里落差。但正如我们熟知的那样，真理往往掌握在少数人手中，群体心里学里著名的《乌合之众》也披露了大众智商其实是拉低个体智商的现象。所以也必须像我们熟知的那样，想要成功必须和别人不同，也就意味着很有可能需要站在权威、大众的对立面，无视不断提高的证伪成本，用尽全力推翻已经形成的”真相“，所要面对可不仅仅是舆论压力、精神压力、经济压力这么简单，要知道这是尝试颠覆一个既定的规则，创造一个证伪成本更高的路径的”真相“，自己成为权威让大多数人信服。当然啦，创造真相只是成功的一个必要条件而已，铺开来讲又涉及到阶层、宿命等各种复杂的话题，我是没精力折腾这个问题。\n\n那对于我自己的今后，该怎么面对如何定义真相的问题？王阳明的心学是个很棒的指导思想，”天理即人欲“作为终极法则来解释这千奇百怪的世界再合适不过，不过和其他伟大的真理一样，只是摆出一句话的话只是个有用的废话而已，怎么理解这个体系呢？总不能又学他老人家格物致知对着竹子格半天吧？先不说现在互联网爆炸的信息量，光是心学这个体系都分出了好几派，哪个才是根正苗红的心学哪个才有用？如果说我不管，都过一遍，光是从纷纭复杂的想法中梳理总结已经异常困难，然后又要”知行合一“，剩下的寿命够么？\n\n看起来非常纠结，这时候对于一个直男来说最有效的方法无疑是：玩个游戏吧。玩着玩着其实就发现了答案，整个思考过程繁琐低效和冗长无趣，就说说自己最终形成的一个方法论：**建立起自己内心的沙盒世界**。在此感谢和安利两部伟大的独立游戏：《史丹利的公寓》和《我的世界》。沙盒的概念可以简单概括为一个资源受限的封闭空间，所有对外界的信息交流和资源交换需要专门的渠道申请，早已广泛用于计算机安全和军事演练，实质是种安全机制。听起来挺像是要封闭自己的内心世界是吧？就是要封闭没错。但不是死锁内心世界的大门，不是闭关锁国，只是极大限制你**核心思想世界**对外界的直接接触，对接纳的信息建立足够严苛的审查机制。但同时也要给这个沙盒世界源源不断提供足够丰富的资源，才能很好的模拟外界的信息对核心思想世界的创造或者破坏，直到证伪成本足够高了才纳入自己的核心思想世界。\n\n想了这么多写了这么多，核心思想世界这个概念还是很难解释的清楚，是一个理智的精神世界？是一种信仰和情绪缔造的圣地？或许根本就不需要解释，对于我而言更像是一个就算身处绝境还依旧稳固存在的世界，肉体的消亡和世人的遗忘与这个世界并无关系，是我存在、活着、呼吸的一个根源性动力，这才是我的世界存在唯一的真相。其余的真相只是五感获取的信息的一个个投射，本质上和我的世界并没有联系。\n\n正如所有的总结一样，最终会落入到俗套的”懂得了很多人生大道理但依旧过不好这一生“的怪圈里。但意义这玩意儿，从来都是自己赋予的，whatever，该咋活就该咋活。\n\n\n\n\n\n\n\n\n","source":"_posts/真相.md","raw":"# 真相\n\n\n---\n\n每年总结这个习惯还是很难改的哈，每到年底总喜欢算算流水账，感慨下人生无常感恩下生命中遇到的人balala...倒也不是腻烦了输出鸡汤和讨厌矫情，但是今年所经历的事情流水账和矫情是无法描述了。已然接近而立之年，矫情和鸡汤只是逃避现实的手段了，知行合一、活在当下才是主旋律。但在此之前，还是很有必要定性下最近几年奠基的认知基础，对我来说才是第一步。虽说思考人生这种东西没有止境，但所谓的四十不惑在我看来只是懒得想了而已，但不能成为拖延的借口，该阐释该记录的，写下来再说。\n\n首先还是想谈谈可以囊括整篇总结的精髓的大作：《黑客帝国》三部曲。\n\n这部已经有十几年历史的电影就算是现在看来也是无比震撼的，其涵盖的哲学思维，人工智能设想，科幻场景渲染已经成为科幻电影的经典。我阅片确实很少，虽不能称其前无古人后无来者，但对于当时还是青春年少的我来说带来的震慑和影响是超过了那些经典的励志电影。其中最经典的一句话现在仍是思考问题时的黄金法则：\n\n> 什么叫真相？你怎样给真相下定义？如果你说真相就是你能感觉到的东西，你能闻到的气味，你能尝到的味道，那么这个真相就是你大脑作出反应的电子信号。\n\n由此开启了为期一年的思考：**真相真的存在吗？**\n\n直接给结论：**不存在, 真相只是证伪成本极高的一个镜像**\n\n非常引人入胜的话题，但就跟鸡与蛋的问题一样钻牛角尖并且深究起来毫无意义——除非相关紧要的利益，但就算如此也只能发现人类在命运之神面前的渺小和无奈，在黑客帝国里的展现更是让人窒息：上天遁地超人般的Neo，也只是创世神的一个棋子，用来一次次重启matrix;所谓争取到的自由的zion人民，其实早已被毁灭过数次。不说这些影响剧情的角色，只站在一个尚被matrix控制的普通人，在线头拔掉之前，他们所认为的世界的真相，会是已经被机器人控制的地底世界么？他们如果连他们的五感都不信还能信什么真相？\n\n其实站在更高的角度来看，发现这个问题确实跟鸡与蛋的问题是一样的解决思路。**真相固然存在，并且真相其实是无数个的**。更高的角度在这的严格解释就是更高的维度，假如你能像《星际穿越》的Copper一样身处五维空间，开启上帝视角看着你错综复杂的时间线，就很明显的知道真相有很多分支，并不是柯南里说的“真相只有一个”。\n\n哈哈，这个扯的有点太大，毕竟我们身处的只是三维空间而已，“真相只有一个”这种设定其实是可以成立的。五维空间的上帝可以帮我们作证（虽然我相信他老人家应该处于十维空间）。但对于我们个人来说，**真相是否就是那个证伪成本太高的那条路径呢**？从宇宙大爆炸假说，薄**事件到底你为啥没升职恋人为何离开你，都会有解释、证据、数据等强有力的证明来让你信服：这些就是真相。你要质疑，可以，找到更有力的证据把这些证据推翻，然后如此循环，越到后面取证越困难，所消耗的时间或者金钱已经不足于证伪，你还会怀疑吗？就算还会怀疑，你能做的只有怀疑了：毕竟你个人再也无法证伪了——除非你也来个愚公移山计划。这还是对于愿意打破砂锅的人，对于不愿深究的人呢？也就是持有所谓的“相信眼前所见为实“的人，对他们来说证伪成本需要高于”亲眼所见“是不是就无法接受了呢？\n\n既然证伪成本随着深究的程度而无限提高，于是对于大多数的我们来说，获取真相的低成本途径就剩下了有限的两条：\n**1.相信权威  \n2.相信大多数。**\n\n够用了，既然不能保证绝对正确，找个大多数时候正确然后就算出错会有相当一堆人跟你一样错至少可以减少你的心里落差。但正如我们熟知的那样，真理往往掌握在少数人手中，群体心里学里著名的《乌合之众》也披露了大众智商其实是拉低个体智商的现象。所以也必须像我们熟知的那样，想要成功必须和别人不同，也就意味着很有可能需要站在权威、大众的对立面，无视不断提高的证伪成本，用尽全力推翻已经形成的”真相“，所要面对可不仅仅是舆论压力、精神压力、经济压力这么简单，要知道这是尝试颠覆一个既定的规则，创造一个证伪成本更高的路径的”真相“，自己成为权威让大多数人信服。当然啦，创造真相只是成功的一个必要条件而已，铺开来讲又涉及到阶层、宿命等各种复杂的话题，我是没精力折腾这个问题。\n\n那对于我自己的今后，该怎么面对如何定义真相的问题？王阳明的心学是个很棒的指导思想，”天理即人欲“作为终极法则来解释这千奇百怪的世界再合适不过，不过和其他伟大的真理一样，只是摆出一句话的话只是个有用的废话而已，怎么理解这个体系呢？总不能又学他老人家格物致知对着竹子格半天吧？先不说现在互联网爆炸的信息量，光是心学这个体系都分出了好几派，哪个才是根正苗红的心学哪个才有用？如果说我不管，都过一遍，光是从纷纭复杂的想法中梳理总结已经异常困难，然后又要”知行合一“，剩下的寿命够么？\n\n看起来非常纠结，这时候对于一个直男来说最有效的方法无疑是：玩个游戏吧。玩着玩着其实就发现了答案，整个思考过程繁琐低效和冗长无趣，就说说自己最终形成的一个方法论：**建立起自己内心的沙盒世界**。在此感谢和安利两部伟大的独立游戏：《史丹利的公寓》和《我的世界》。沙盒的概念可以简单概括为一个资源受限的封闭空间，所有对外界的信息交流和资源交换需要专门的渠道申请，早已广泛用于计算机安全和军事演练，实质是种安全机制。听起来挺像是要封闭自己的内心世界是吧？就是要封闭没错。但不是死锁内心世界的大门，不是闭关锁国，只是极大限制你**核心思想世界**对外界的直接接触，对接纳的信息建立足够严苛的审查机制。但同时也要给这个沙盒世界源源不断提供足够丰富的资源，才能很好的模拟外界的信息对核心思想世界的创造或者破坏，直到证伪成本足够高了才纳入自己的核心思想世界。\n\n想了这么多写了这么多，核心思想世界这个概念还是很难解释的清楚，是一个理智的精神世界？是一种信仰和情绪缔造的圣地？或许根本就不需要解释，对于我而言更像是一个就算身处绝境还依旧稳固存在的世界，肉体的消亡和世人的遗忘与这个世界并无关系，是我存在、活着、呼吸的一个根源性动力，这才是我的世界存在唯一的真相。其余的真相只是五感获取的信息的一个个投射，本质上和我的世界并没有联系。\n\n正如所有的总结一样，最终会落入到俗套的”懂得了很多人生大道理但依旧过不好这一生“的怪圈里。但意义这玩意儿，从来都是自己赋予的，whatever，该咋活就该咋活。\n\n\n\n\n\n\n\n\n","slug":"真相","published":1,"date":"2017-01-24T03:36:24.822Z","updated":"2017-01-24T03:36:06.891Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjajmn9t30007gg1kos8bvv8w"},{"layout":"hexo","title":"晦涩的成人寓言——斯坦利的寓言","date":"2016-02-04T09:51:22.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;玩惯了主流的PC游戏，都是清一色的打打杀杀，连连连跑跑跑，有时是会很厌倦的，相信这也是大多数即将步入而立之年的人不怎么再爱玩游戏的一个原因，更多处于无聊在手机上玩点休闲的游戏去消磨时光，更糟糕的是最有购买力的大龄青年们越来越不愿意去动脑玩游戏，所谓的手游黄金时期就是给无脑休闲手游带起来的。当然可以振振有词的说沉迷游戏可不好多花点时间在工作学习上收获更多，那么，接下来介绍的这款游戏或许可以让你重新思考一下游戏到底是什么。\n\n![游戏封面截图](http://i0.hdslb.com/u_user/889cd17bd17f6a6a800da7c7b9fbe50d.jpg)\n\n>最早作为《半条命2》模组诞生的《史丹利的寓言（Stanley Parable）》是一部特殊的作品，与其说他是游戏，不如说更像是一部晦涩难懂的意识流电影。即便在独立游戏越来越笔走偏锋的今天，它也奇怪得令人费解。有人说它是关于自由意志的嘲讽；有人说它是关于设计工作的无厘头解读；还有人说它是卡夫卡笔下的官僚主义噩梦。但只有一点是肯定的，不是所有的玩家都会爱上《史丹利的寓言》，如果你身边的十个朋友个个都说他们喜欢，其中有一两个人跟风说谎的可能性相当的高。\n\n&nbsp;&nbsp;&nbsp;&nbsp;知道这部作品时是敖厂长在视频里玩的，对于敖厂长那种逗逼型解说对这部作品明显是不恰当的，这是我还没开始玩的时候就有的结论，这并不是部轻松的游戏。从这部宣传片你可以看个大概：\n\nhttp://v.youku.com/v_show/id_XNjIzMzkwOTQ0.html\n\n&nbsp;&nbsp;&nbsp;&nbsp;当时是冲着游戏简介去的，我对沙盒和多结局的游戏疯狂的热爱，非常喜欢那种探索一遍又一遍之后还能有新发现的感觉，大概也是受我看书的习惯影响所致。当我刚进去游戏的第一感觉就是：\n\n**新奇而压抑**\n\n![史坦利](http://img1.tgbusdata.cn/thumbnail/jpg/YjAxNyw2MDAsNjAwLDQsMSwxLC0xLDEsMSxyazUw/u/pc.tgbus.com/uploads/allimg/131119/265-131119154144.jpg)\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;大公司的小职员，每天做着单调重复的工作，面无表情或者呆滞，突然有一天出意外了就不知所措...\n这强烈的代入感居然是旁白兄给的，不得不说非常专业。\n\n&nbsp;&nbsp;&nbsp;&nbsp;然后碰到我的第一个选择：\n\n![史坦利的第一个选择](http://img1.gamersky.com/image2014/01/20140121zym_2/gamersky_01small_02_201412113086C.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;左边代表顺从,右边代表逆反。\n&nbsp;&nbsp;&nbsp;&nbsp;未知的情况，空无一人的大楼，一个莫名奇妙的旁白，信还是不信？\n&nbsp;&nbsp;&nbsp;&nbsp;于是所有结局和剧情都在此展开，在此期间，史丹利可能跳楼身亡，可能陷入永远走不出的死循环然后暴毙在街上，可能义无反顾的选择自己可预见残酷的结局。当然史丹利也可以一直相信旁白君，配合着他完成一次完美的结局，一次自由意志取得完全大胜利的结局，但即便如此，游戏还是会重启，一次又一次。在此期间，你或许收到赞扬和夸奖，更多的是讽刺与打击，旁白君可能是你的朋友，也可能是过路人而已。史丹利可以做出很多选择，试图改变自己的命运，确实他一次又一次获得了不同的结局，美好的平庸的凄惨的，但故事还是回到起点，一次又一次，每次都回到他那狭窄的办公室里，等着指令按按钮，然后被迫站起身来，去探索不同的结局。\n&nbsp;&nbsp;&nbsp;&nbsp;真是对自由意志彻头彻尾的讽刺啊。我们所认为重要的或许到最后还是要回到起点，我们所坚持的选择或许根本摆脱不了困境，我们做出的选择，其实可能到头来根本没有意义。\n&nbsp;&nbsp;&nbsp;&nbsp;这部游戏本身想告诉我们的寓意根本就是不明了的，活脱脱就是去暴力版的大卫林奇作品，混沌而不真实，却能让玩家一遍又一遍去玩，去思索那背后可能连导演都没想好的含义。也出现了各路大神级玩家，其中有一个结局需要你按四个小时的按钮，结果还真有人做了：[《史丹利的寓言》如果你玩婴儿游戏4小时](http://www.bilibili.com/video/av1242222/)\n\n&nbsp;&nbsp;&nbsp;&nbsp;具体的游戏评测游民有一篇文章将的也很到位：\n[《史丹利的寓言（Stanley Parable）》游民星空点评8.2分 艰涩的成人童话](http://www.gamersky.com/review/201401/327504.shtml)\n\n&nbsp;&nbsp;&nbsp;&nbsp;对于我来说，这部游戏可以带来的是一遍一遍的思考，审视当前的人生轨迹，作为一个史坦利，我还能在故事做什么？我知道自己最后的结局，但也会和史坦利一样，不断去探索，作茧自缚实在太没意思了。\n\n\n","source":"_posts/晦涩的成人寓言——斯坦利的寓言.md","raw":"layout: hexo\ntitle: 晦涩的成人寓言——斯坦利的寓言\ndate: 2016-2-4 17:51:22\ntags: 游戏\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;玩惯了主流的PC游戏，都是清一色的打打杀杀，连连连跑跑跑，有时是会很厌倦的，相信这也是大多数即将步入而立之年的人不怎么再爱玩游戏的一个原因，更多处于无聊在手机上玩点休闲的游戏去消磨时光，更糟糕的是最有购买力的大龄青年们越来越不愿意去动脑玩游戏，所谓的手游黄金时期就是给无脑休闲手游带起来的。当然可以振振有词的说沉迷游戏可不好多花点时间在工作学习上收获更多，那么，接下来介绍的这款游戏或许可以让你重新思考一下游戏到底是什么。\n\n![游戏封面截图](http://i0.hdslb.com/u_user/889cd17bd17f6a6a800da7c7b9fbe50d.jpg)\n\n>最早作为《半条命2》模组诞生的《史丹利的寓言（Stanley Parable）》是一部特殊的作品，与其说他是游戏，不如说更像是一部晦涩难懂的意识流电影。即便在独立游戏越来越笔走偏锋的今天，它也奇怪得令人费解。有人说它是关于自由意志的嘲讽；有人说它是关于设计工作的无厘头解读；还有人说它是卡夫卡笔下的官僚主义噩梦。但只有一点是肯定的，不是所有的玩家都会爱上《史丹利的寓言》，如果你身边的十个朋友个个都说他们喜欢，其中有一两个人跟风说谎的可能性相当的高。\n\n&nbsp;&nbsp;&nbsp;&nbsp;知道这部作品时是敖厂长在视频里玩的，对于敖厂长那种逗逼型解说对这部作品明显是不恰当的，这是我还没开始玩的时候就有的结论，这并不是部轻松的游戏。从这部宣传片你可以看个大概：\n\nhttp://v.youku.com/v_show/id_XNjIzMzkwOTQ0.html\n\n&nbsp;&nbsp;&nbsp;&nbsp;当时是冲着游戏简介去的，我对沙盒和多结局的游戏疯狂的热爱，非常喜欢那种探索一遍又一遍之后还能有新发现的感觉，大概也是受我看书的习惯影响所致。当我刚进去游戏的第一感觉就是：\n\n**新奇而压抑**\n\n![史坦利](http://img1.tgbusdata.cn/thumbnail/jpg/YjAxNyw2MDAsNjAwLDQsMSwxLC0xLDEsMSxyazUw/u/pc.tgbus.com/uploads/allimg/131119/265-131119154144.jpg)\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;大公司的小职员，每天做着单调重复的工作，面无表情或者呆滞，突然有一天出意外了就不知所措...\n这强烈的代入感居然是旁白兄给的，不得不说非常专业。\n\n&nbsp;&nbsp;&nbsp;&nbsp;然后碰到我的第一个选择：\n\n![史坦利的第一个选择](http://img1.gamersky.com/image2014/01/20140121zym_2/gamersky_01small_02_201412113086C.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;左边代表顺从,右边代表逆反。\n&nbsp;&nbsp;&nbsp;&nbsp;未知的情况，空无一人的大楼，一个莫名奇妙的旁白，信还是不信？\n&nbsp;&nbsp;&nbsp;&nbsp;于是所有结局和剧情都在此展开，在此期间，史丹利可能跳楼身亡，可能陷入永远走不出的死循环然后暴毙在街上，可能义无反顾的选择自己可预见残酷的结局。当然史丹利也可以一直相信旁白君，配合着他完成一次完美的结局，一次自由意志取得完全大胜利的结局，但即便如此，游戏还是会重启，一次又一次。在此期间，你或许收到赞扬和夸奖，更多的是讽刺与打击，旁白君可能是你的朋友，也可能是过路人而已。史丹利可以做出很多选择，试图改变自己的命运，确实他一次又一次获得了不同的结局，美好的平庸的凄惨的，但故事还是回到起点，一次又一次，每次都回到他那狭窄的办公室里，等着指令按按钮，然后被迫站起身来，去探索不同的结局。\n&nbsp;&nbsp;&nbsp;&nbsp;真是对自由意志彻头彻尾的讽刺啊。我们所认为重要的或许到最后还是要回到起点，我们所坚持的选择或许根本摆脱不了困境，我们做出的选择，其实可能到头来根本没有意义。\n&nbsp;&nbsp;&nbsp;&nbsp;这部游戏本身想告诉我们的寓意根本就是不明了的，活脱脱就是去暴力版的大卫林奇作品，混沌而不真实，却能让玩家一遍又一遍去玩，去思索那背后可能连导演都没想好的含义。也出现了各路大神级玩家，其中有一个结局需要你按四个小时的按钮，结果还真有人做了：[《史丹利的寓言》如果你玩婴儿游戏4小时](http://www.bilibili.com/video/av1242222/)\n\n&nbsp;&nbsp;&nbsp;&nbsp;具体的游戏评测游民有一篇文章将的也很到位：\n[《史丹利的寓言（Stanley Parable）》游民星空点评8.2分 艰涩的成人童话](http://www.gamersky.com/review/201401/327504.shtml)\n\n&nbsp;&nbsp;&nbsp;&nbsp;对于我来说，这部游戏可以带来的是一遍一遍的思考，审视当前的人生轨迹，作为一个史坦利，我还能在故事做什么？我知道自己最后的结局，但也会和史坦利一样，不断去探索，作茧自缚实在太没意思了。\n\n\n","slug":"晦涩的成人寓言——斯坦利的寓言","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9t30008gg1khplmj65u"},{"layout":"hexo","title":"序","date":"2015-12-24T11:53:22.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得当时刚在豆瓣开通账号时也写了个序，希望自己能保持记录的习惯，保持思考的习惯，但很遗憾，停了好长的一段时间没有动笔，或者干脆写了一半便再也写不下去，那心血来潮的文字便成了个doc放在硬盘里长眠。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这年头哪里还缺文章，哪里还缺秀自己的感悟，哪里还稀罕微不足道的普通人的一点微不足道的感触。就算是花了大量时间好不容易写出一篇自我感觉还不错的文章，网上随便一找就可以完虐，所有的成就感灰飞烟灭。\n然而正如寒门难出贵子一样，难并不等于绝对不可能，况且写作的含义并不仅仅限于一种给别人有用的分享或者给自己的无懈可击的总结，它是一段时光的证明，是记录生活一种无法取代的方式。尽管我有了相机之后回去用图片记录，有了朋友圈之后可以碎片化记录，但始终没有用写作去记录更有质感和真实感，它已成为我不可或缺的一种生活方式。尽管再忙，尽管很难坚持每天都写，尽管很难保证高质量的分享，但不应该成为不写作的借口\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以再起一个序，用自己的博客来写，更有动力和追求。愿自己在后续的道路上，勿忘初心，做好一个普通人应该做的事，做好自己喜欢的事。","source":"_posts/序.md","raw":"layout: hexo\ntitle: 序\ndate: 2015-12-24 19:53:22\ntags: 感悟\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得当时刚在豆瓣开通账号时也写了个序，希望自己能保持记录的习惯，保持思考的习惯，但很遗憾，停了好长的一段时间没有动笔，或者干脆写了一半便再也写不下去，那心血来潮的文字便成了个doc放在硬盘里长眠。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这年头哪里还缺文章，哪里还缺秀自己的感悟，哪里还稀罕微不足道的普通人的一点微不足道的感触。就算是花了大量时间好不容易写出一篇自我感觉还不错的文章，网上随便一找就可以完虐，所有的成就感灰飞烟灭。\n然而正如寒门难出贵子一样，难并不等于绝对不可能，况且写作的含义并不仅仅限于一种给别人有用的分享或者给自己的无懈可击的总结，它是一段时光的证明，是记录生活一种无法取代的方式。尽管我有了相机之后回去用图片记录，有了朋友圈之后可以碎片化记录，但始终没有用写作去记录更有质感和真实感，它已成为我不可或缺的一种生活方式。尽管再忙，尽管很难坚持每天都写，尽管很难保证高质量的分享，但不应该成为不写作的借口\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以再起一个序，用自己的博客来写，更有动力和追求。愿自己在后续的道路上，勿忘初心，做好一个普通人应该做的事，做好自己喜欢的事。","slug":"序","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9t3000bgg1kej0p9m3u"},{"layout":"hexo","title":"【Android training】文件共享","date":"2015-10-30T12:12:22.000Z","_content":"原文地址：[Sharing Files](http://developer.android.com/training/secure-file-sharing/index.html).\n\n\n为了能安全的将一个文件提供给另一个APP，你需要配置好你的APP，给文件提供一个安全的句柄。Android 组件 [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 基于XML配置，为文件生成内容URI。\n\n>  Tips: [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 已经作为 [v4 Support Library](http://developer.android.com/tools/support-library/features.html#v4)的一部分了哟~\n\n## 声明一个FileProvider\n\n定义一个FileProvider需要在你的mainfest中添加一个入口。这个入口声明了生成内容URI的authorities以及XML文件的名字。这个XML文件确定了你的APP能分享的目录。\n以下是个栗子：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n在这个栗子中，[android:authorities](http://developer.android.com/guide/topics/manifest/provider-element.html#auth)属性规定了URL所属的authorities,用于FileProvider生成content uri。meta-data 子元素指向了你想分享出去的XML文件，android:resource指定这个文件的路径和名称（并不包括.xml后缀名哟）\n\n## 指定要分享的目录\n当你把FileProvider加入到你的app的Mainfest中后，你需要指定你所要分享的文件所属目录。需要在你的项目目录下 res/xml/创建filepaths.xml 。在这个文件中通过增加XML元素表示你的目录。以下又是一颗栗子：\n```\n<paths>\n    <files-path path=\"images/\" name=\"myimages\" />\n</paths>\n```\n在这个栗子中，files-path 标签共享了你的应用内部存储里的files/. path属性表明分享files/目录下的子目录images/。name属性让FileFileProvider在生成的content URI加上由name指定的路径分隔符。详情可以看看[FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 为何可以这么做。\n`<paths>`元素可以有多个子元素，确定多个需要共享的文件夹。除了`<files-path>`标签之外，还可以用`<external-path>`元素共享外部存储文件夹，并且还可以用`<cache-path>`分享内部存储的缓存文件夹。\n\n> 注意： 只能用XML文件的形式来制定你要分享到文件夹，你不能通过java代码的形式动态加一个文件夹\n\n现在呢，你就有一个完整的FileProvider，它能帮你生成你应用内部存储中的files/目录及其子目录下文件的content URI。\n再举个栗子，如果你按照上面的代码片段定义了一个FileProvider，然后你请求一个default_image.jpg的URI，FileProvider就会返回如下URI：\n`content://com.example.myapp.fileprovider/myimages/default_image.jpg`\n\n## 接收文件分享请求\n为了能接收请求方APP的文件请求并响应对应的文件content uri，你应该提供一个文件选择Activity。这样的话请求方APP可以通过startActivityForResult启动这个Activity，传递一个带ACTION_PICK的action的Intent，该Activity接收并处理完毕要嗝屁时，就可以通过setResult反馈uri。\n\n## 创建一个文件选择的Activity\n\n直接上代码说明：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n        <application>\n        ...\n            <activity\n                android:name=\".FileSelectActivity\"\n                android:label=\"@\"File Selector\" >\n                <intent-filter>\n                    <action\n                        android:name=\"android.intent.action.PICK\"/>\n                        //指定OPENABLE和DEFAULT两种类型\n                    <category\n                        android:name=\"android.intent.category.DEFAULT\"/>\n                    <category\n                        android:name=\"android.intent.category.OPENABLE\"/>\n                        //通过mimeType制定所需数据类型\n                    <data android:mimeType=\"text/plain\"/>\n                    <data android:mimeType=\"image/*\"/>\n                </intent-filter>\n            </activity>\n```\n\n## 访问分享的文件\n\n接收方APP会用Intent向请求方发送共享文件的uri，这个Intent将会被传递到请求方的onActivityResult()里。当请求方拿到了文件的cotent uri, 可以通过[FileDescriptor](http://developer.android.com/reference/java/io/FileDescriptor.html)访问共享文件。\n在这个过程中，文件访问安全性是得到保证滴。由于content uri不包含目录路径，请求方不能获取到接收方其他的文件。\n以下是个栗子~\n```\n  /*\n     * When the Activity of the app that hosts files sets a result and calls\n     * finish(), this method is invoked. The returned Intent contains the\n     * content URI of a selected file. The result code indicates if the\n     * selection worked or not.\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode,\n            Intent returnIntent) {\n        // If the selection didn't work\n        if (resultCode != RESULT_OK) {\n            // Exit without doing anything else\n            return;\n        } else {\n            // Get the file's content URI from the incoming Intent\n            Uri returnUri = returnIntent.getData();\n            /*\n             * Try to open the file for \"read\" access using the\n             * returned URI. If the file isn't found, write to the\n             * error log and return.\n             */\n            try {\n                /*\n                 * Get the content resolver instance for this context, and use it\n                 * to get a ParcelFileDescriptor for the file.\n                 */\n                mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n                Log.e(\"MainActivity\", \"File not found.\");\n                return;\n            }\n            // Get a regular file descriptor for the file\n            FileDescriptor fd = mInputPFD.getFileDescriptor();\n            ...\n        }\n    }\n```\n\n## 获取共享文件的MIME格式\n一个文件的数据格式可以表示请求方APP该如何处理该文件内容。我们可以通过调用ContentResolver.getType()来获取共享文件的数据类型，这个方法反馈该文件的MIME类型。**FileProvider默认用文件的后缀名来判断文件所属数据类型**。\n以下是个栗子：\n```\n    /*\n     * Get the file's content URI from the incoming Intent, then\n     * get the file's MIME type\n     */\n    Uri returnUri = returnIntent.getData();\n    String mimeType = getContentResolver().getType(returnUri);\n```\n\n## 获取共享文件的名字和大小\nFileProvider 有着query() 接口的默认实现，返回一个带着文件大小和名字的Curosr。默认返回两列：\n\n- DISPLAY_NAME\n    文件名，返回值与File.getName()相同\n- SIZE\n 文件大小，返回值和File.length()相同\n\n以下就是个获取的栗子：\n\n```\n /*\n     * Get the file's content URI from the incoming Intent,\n     * then query the server app to get the file's display name\n     * and size.\n     */\n    Uri returnUri = returnIntent.getData();\n    Cursor returnCursor =\n            getContentResolver().query(returnUri, null, null, null, null);\n    /*\n     * Get the column indexes of the data in the Cursor,\n     * move to the first row in the Cursor, get the data,\n     * and display it.\n     */\n    int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n    int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n    returnCursor.moveToFirst();\n    TextView nameView = (TextView) findViewById(R.id.filename_text);\n    TextView sizeView = (TextView) findViewById(R.id.filesize_text);\n    nameView.setText(returnCursor.getString(nameIndex));\n    sizeView.setText(Long.toString(returnCursor.getLong(sizeIndex)));\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【Android training】文件共享.md","raw":"layout: hexo\ntitle: 【Android training】文件共享\ndate: 2015-10-30 20:12:22\ntags: Android training 翻译\n---\n原文地址：[Sharing Files](http://developer.android.com/training/secure-file-sharing/index.html).\n\n\n为了能安全的将一个文件提供给另一个APP，你需要配置好你的APP，给文件提供一个安全的句柄。Android 组件 [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 基于XML配置，为文件生成内容URI。\n\n>  Tips: [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 已经作为 [v4 Support Library](http://developer.android.com/tools/support-library/features.html#v4)的一部分了哟~\n\n## 声明一个FileProvider\n\n定义一个FileProvider需要在你的mainfest中添加一个入口。这个入口声明了生成内容URI的authorities以及XML文件的名字。这个XML文件确定了你的APP能分享的目录。\n以下是个栗子：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n在这个栗子中，[android:authorities](http://developer.android.com/guide/topics/manifest/provider-element.html#auth)属性规定了URL所属的authorities,用于FileProvider生成content uri。meta-data 子元素指向了你想分享出去的XML文件，android:resource指定这个文件的路径和名称（并不包括.xml后缀名哟）\n\n## 指定要分享的目录\n当你把FileProvider加入到你的app的Mainfest中后，你需要指定你所要分享的文件所属目录。需要在你的项目目录下 res/xml/创建filepaths.xml 。在这个文件中通过增加XML元素表示你的目录。以下又是一颗栗子：\n```\n<paths>\n    <files-path path=\"images/\" name=\"myimages\" />\n</paths>\n```\n在这个栗子中，files-path 标签共享了你的应用内部存储里的files/. path属性表明分享files/目录下的子目录images/。name属性让FileFileProvider在生成的content URI加上由name指定的路径分隔符。详情可以看看[FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 为何可以这么做。\n`<paths>`元素可以有多个子元素，确定多个需要共享的文件夹。除了`<files-path>`标签之外，还可以用`<external-path>`元素共享外部存储文件夹，并且还可以用`<cache-path>`分享内部存储的缓存文件夹。\n\n> 注意： 只能用XML文件的形式来制定你要分享到文件夹，你不能通过java代码的形式动态加一个文件夹\n\n现在呢，你就有一个完整的FileProvider，它能帮你生成你应用内部存储中的files/目录及其子目录下文件的content URI。\n再举个栗子，如果你按照上面的代码片段定义了一个FileProvider，然后你请求一个default_image.jpg的URI，FileProvider就会返回如下URI：\n`content://com.example.myapp.fileprovider/myimages/default_image.jpg`\n\n## 接收文件分享请求\n为了能接收请求方APP的文件请求并响应对应的文件content uri，你应该提供一个文件选择Activity。这样的话请求方APP可以通过startActivityForResult启动这个Activity，传递一个带ACTION_PICK的action的Intent，该Activity接收并处理完毕要嗝屁时，就可以通过setResult反馈uri。\n\n## 创建一个文件选择的Activity\n\n直接上代码说明：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n        <application>\n        ...\n            <activity\n                android:name=\".FileSelectActivity\"\n                android:label=\"@\"File Selector\" >\n                <intent-filter>\n                    <action\n                        android:name=\"android.intent.action.PICK\"/>\n                        //指定OPENABLE和DEFAULT两种类型\n                    <category\n                        android:name=\"android.intent.category.DEFAULT\"/>\n                    <category\n                        android:name=\"android.intent.category.OPENABLE\"/>\n                        //通过mimeType制定所需数据类型\n                    <data android:mimeType=\"text/plain\"/>\n                    <data android:mimeType=\"image/*\"/>\n                </intent-filter>\n            </activity>\n```\n\n## 访问分享的文件\n\n接收方APP会用Intent向请求方发送共享文件的uri，这个Intent将会被传递到请求方的onActivityResult()里。当请求方拿到了文件的cotent uri, 可以通过[FileDescriptor](http://developer.android.com/reference/java/io/FileDescriptor.html)访问共享文件。\n在这个过程中，文件访问安全性是得到保证滴。由于content uri不包含目录路径，请求方不能获取到接收方其他的文件。\n以下是个栗子~\n```\n  /*\n     * When the Activity of the app that hosts files sets a result and calls\n     * finish(), this method is invoked. The returned Intent contains the\n     * content URI of a selected file. The result code indicates if the\n     * selection worked or not.\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode,\n            Intent returnIntent) {\n        // If the selection didn't work\n        if (resultCode != RESULT_OK) {\n            // Exit without doing anything else\n            return;\n        } else {\n            // Get the file's content URI from the incoming Intent\n            Uri returnUri = returnIntent.getData();\n            /*\n             * Try to open the file for \"read\" access using the\n             * returned URI. If the file isn't found, write to the\n             * error log and return.\n             */\n            try {\n                /*\n                 * Get the content resolver instance for this context, and use it\n                 * to get a ParcelFileDescriptor for the file.\n                 */\n                mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n                Log.e(\"MainActivity\", \"File not found.\");\n                return;\n            }\n            // Get a regular file descriptor for the file\n            FileDescriptor fd = mInputPFD.getFileDescriptor();\n            ...\n        }\n    }\n```\n\n## 获取共享文件的MIME格式\n一个文件的数据格式可以表示请求方APP该如何处理该文件内容。我们可以通过调用ContentResolver.getType()来获取共享文件的数据类型，这个方法反馈该文件的MIME类型。**FileProvider默认用文件的后缀名来判断文件所属数据类型**。\n以下是个栗子：\n```\n    /*\n     * Get the file's content URI from the incoming Intent, then\n     * get the file's MIME type\n     */\n    Uri returnUri = returnIntent.getData();\n    String mimeType = getContentResolver().getType(returnUri);\n```\n\n## 获取共享文件的名字和大小\nFileProvider 有着query() 接口的默认实现，返回一个带着文件大小和名字的Curosr。默认返回两列：\n\n- DISPLAY_NAME\n    文件名，返回值与File.getName()相同\n- SIZE\n 文件大小，返回值和File.length()相同\n\n以下就是个获取的栗子：\n\n```\n /*\n     * Get the file's content URI from the incoming Intent,\n     * then query the server app to get the file's display name\n     * and size.\n     */\n    Uri returnUri = returnIntent.getData();\n    Cursor returnCursor =\n            getContentResolver().query(returnUri, null, null, null, null);\n    /*\n     * Get the column indexes of the data in the Cursor,\n     * move to the first row in the Cursor, get the data,\n     * and display it.\n     */\n    int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n    int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n    returnCursor.moveToFirst();\n    TextView nameView = (TextView) findViewById(R.id.filename_text);\n    TextView sizeView = (TextView) findViewById(R.id.filesize_text);\n    nameView.setText(returnCursor.getString(nameIndex));\n    sizeView.setText(Long.toString(returnCursor.getLong(sizeIndex)));\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"【Android training】文件共享","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9t3000egg1k05mkaidx"},{"layout":"hexo","title":"【Android training】引导到另一个APP","date":"2015-10-30T12:12:22.000Z","_content":"\nAndroid最重要的一个特性就是可以通过action引导到其他APP里去了。比如说你想在你的APP中将一些地址显示在地图上，你无需专门搞个activity显示地图，你可以用带有地址信息的Intent发起请求，Android系统就会拉起一个APP去做到这点。\n\n## 用隐式Intent\n隐式Intent无需你指定具体的Class，把指定的action(比如view, edit, send, or get)，再把数据带上就欧啦。\n\n以下是一些例子：\n```\n//打电话\nUri number = Uri.parse(\"tel:5551234\");\nIntent callIntent = new Intent(Intent.ACTION_DIAL, number);\n//用地图\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nUri location = Uri.parse(\"geo:37.422219,-122.08364?z=14\"); \nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n//浏览网页\nUri webpage = Uri.parse(\"http://www.android.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);\n```\n\n## 看看有没应用可以接受俺们的Intent\n\n尽管Android系统保证肯定有个内置应用（比如电话，电邮，日历等）会接受俺们的Intent,但你始终应该在使用这个Intent之前要确认下。\n\n>注意：如果你作死使用了一个根本没有应用能接受的Intent，你的APP会Crash的！(ノಠ益ಠ)ノ彡┻━┻\n\n调用queryIntentActivities()就可以获得能接受你的Intent的应用列表，如果返回的不是空列表你就能安心使用这个Intent啦，\\(^o^)/YES!\n```\nPackageManager packageManager = getPackageManager();\nList activities = packageManager.queryIntentActivities(intent,\n        PackageManager.MATCH_DEFAULT_ONLY);\nboolean isIntentSafe = activities.size() > 0;\n```\n如果isIntent是true，那就至少有一个应用能接受你的Intent啦\n\n##用你的Intent拉起一个Activity\n\n当你创建好Intent塞进了数据之后，便可以调用startActivity了。如果系统识别到有多个APP可以处理你的Intent,系统会展示一个对话框供用户选择哪个APP打开，如果只有一个APP能处理你的Intent，那就会立刻被打开。\n\n![pic 1](http://developer.android.com/images/training/basics/intents-choice.png \"pic1:供你选择拉起的APP对话框长这样~\")\n\n以下是个完整的例子，演示如何创建一个可以拉起地图应用的intent，然后退出应用拉起地图：\n\n```\n// Build the intent\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n\n// Verify it resolves\nPackageManager packageManager = getPackageManager();\nList<ResolveInfo> activities = packageManager.queryIntentActivities(mapIntent, 0);\nboolean isIntentSafe = activities.size() > 0;\n\n// Start an activity if it's safe\nif (isIntentSafe) {\n    startActivity(mapIntent);\n}\n```\n![pic 2](http://developer.android.com/images/training/basics/intent-chooser.png)\n\n## 显示一个应用选择对话框\n\n可以注意得到当你使用startActivity（）将你的Intent传递到另一个app并且不止一个app可以接收你的Intent时，用户可以通过一个应用选择对话框来决定使用哪个应用，并且能够选择哪个应用作为默认打开方式。如果场景是浏览网页或者拍照那还是个不错的选择。\n\n但是，有些场景可能用户更需要每次都使用不同的app作为打开方式，比如说“分享”。这时你应该强制显示应用选择对话框让用户每次打开时选择使用哪个APP。\n\n\n\n\n```\nIntent intent = new Intent(Intent.ACTION_SEND);\n...\n\n// Always use string resources for UI text.\n// This says something like \"Share this photo with\"\nString title = getResources().getString(R.string.chooser_title);\n// Create intent to show chooser\nIntent chooser = Intent.createChooser(intent, title);\n\n// Verify the intent will resolve to at least one activity\nif (intent.resolveActivity(getPackageManager()) != null) {\n    startActivity(chooser);\n}\n```\n\n\n\n\n \n \n\n\n\n\n\n","source":"_posts/【Android training】引导到另一个APP.md","raw":"layout: hexo\ntitle: 【Android training】引导到另一个APP\ndate: 2015-10-30 20:12:22\ntags: Android training 翻译\n---\n\nAndroid最重要的一个特性就是可以通过action引导到其他APP里去了。比如说你想在你的APP中将一些地址显示在地图上，你无需专门搞个activity显示地图，你可以用带有地址信息的Intent发起请求，Android系统就会拉起一个APP去做到这点。\n\n## 用隐式Intent\n隐式Intent无需你指定具体的Class，把指定的action(比如view, edit, send, or get)，再把数据带上就欧啦。\n\n以下是一些例子：\n```\n//打电话\nUri number = Uri.parse(\"tel:5551234\");\nIntent callIntent = new Intent(Intent.ACTION_DIAL, number);\n//用地图\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nUri location = Uri.parse(\"geo:37.422219,-122.08364?z=14\"); \nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n//浏览网页\nUri webpage = Uri.parse(\"http://www.android.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);\n```\n\n## 看看有没应用可以接受俺们的Intent\n\n尽管Android系统保证肯定有个内置应用（比如电话，电邮，日历等）会接受俺们的Intent,但你始终应该在使用这个Intent之前要确认下。\n\n>注意：如果你作死使用了一个根本没有应用能接受的Intent，你的APP会Crash的！(ノಠ益ಠ)ノ彡┻━┻\n\n调用queryIntentActivities()就可以获得能接受你的Intent的应用列表，如果返回的不是空列表你就能安心使用这个Intent啦，\\(^o^)/YES!\n```\nPackageManager packageManager = getPackageManager();\nList activities = packageManager.queryIntentActivities(intent,\n        PackageManager.MATCH_DEFAULT_ONLY);\nboolean isIntentSafe = activities.size() > 0;\n```\n如果isIntent是true，那就至少有一个应用能接受你的Intent啦\n\n##用你的Intent拉起一个Activity\n\n当你创建好Intent塞进了数据之后，便可以调用startActivity了。如果系统识别到有多个APP可以处理你的Intent,系统会展示一个对话框供用户选择哪个APP打开，如果只有一个APP能处理你的Intent，那就会立刻被打开。\n\n![pic 1](http://developer.android.com/images/training/basics/intents-choice.png \"pic1:供你选择拉起的APP对话框长这样~\")\n\n以下是个完整的例子，演示如何创建一个可以拉起地图应用的intent，然后退出应用拉起地图：\n\n```\n// Build the intent\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n\n// Verify it resolves\nPackageManager packageManager = getPackageManager();\nList<ResolveInfo> activities = packageManager.queryIntentActivities(mapIntent, 0);\nboolean isIntentSafe = activities.size() > 0;\n\n// Start an activity if it's safe\nif (isIntentSafe) {\n    startActivity(mapIntent);\n}\n```\n![pic 2](http://developer.android.com/images/training/basics/intent-chooser.png)\n\n## 显示一个应用选择对话框\n\n可以注意得到当你使用startActivity（）将你的Intent传递到另一个app并且不止一个app可以接收你的Intent时，用户可以通过一个应用选择对话框来决定使用哪个应用，并且能够选择哪个应用作为默认打开方式。如果场景是浏览网页或者拍照那还是个不错的选择。\n\n但是，有些场景可能用户更需要每次都使用不同的app作为打开方式，比如说“分享”。这时你应该强制显示应用选择对话框让用户每次打开时选择使用哪个APP。\n\n\n\n\n```\nIntent intent = new Intent(Intent.ACTION_SEND);\n...\n\n// Always use string resources for UI text.\n// This says something like \"Share this photo with\"\nString title = getResources().getString(R.string.chooser_title);\n// Create intent to show chooser\nIntent chooser = Intent.createChooser(intent, title);\n\n// Verify the intent will resolve to at least one activity\nif (intent.resolveActivity(getPackageManager()) != null) {\n    startActivity(chooser);\n}\n```\n\n\n\n\n \n \n\n\n\n\n\n","slug":"【Android training】引导到另一个APP","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9tj000ggg1k8la2sxet"},{"layout":"hexo","title":"【Android training】引导到另一个APP","date":"2015-11-05T12:30:22.000Z","_content":"\n原文地址：[Allowing Other Apps to Start Your Activity](http://developer.android.com/training/basics/intents/filters.html)\n\n为了让别的应用能拉起你的应用，你需要在你的AndroidMainfest.xml中对应的`<activity>`组件里添加`<intent-filter>`。\n当你的应用安装在设备时，系统会识别你的intent filter然后添加到内置的目录里。当APP使用隐式Intent调用startActivity()或者startActivityForResult（）时，系统会找到哪些应用能接收这个Intent。\n\n## 添加一个Intent Filter\n\n为了合适地定义你的应用中的Activity所能处理的Intent,每个添加的Intent Filter都需要尽可能地具体。\n一个标准的Intent包含以下元素：\n\n### Action\n将要执行的动作名称，规定在你的`<action>`标签中\n### Data\n描述所需传递的数据，规定在你的`<data>`标签中。可以用多个属性规定这个元素，比如说MIME类型，uri前缀，uri scheme，或者是这些属性的组合或者重复。\n### Category\n提供一种附加的方法来标识activity如何处理这个Intent，通常和用户的手势位置从哪儿开始有关。系统支持多种不同的分类，但是大部分很少用的到。**但是，所有隐式Intent默认被定义成CATEGORY_DEFAULT**\n\n举个栗子，这是一个能接收ACTION_SEND动作，文字或者图像作为数据的Activity：\n```\n<activity android:name=\"ShareActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.SEND\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <data android:mimeType=\"text/plain\"/>\n        <data android:mimeType=\"image/*\"/>\n    </intent-filter>\n</activity>\n```\n每个Intent只能确定一个Action和一种data类型，但`<intent-filter>`可以含有多个`<action>`, `<category>`, 和 `<data>`。\n\n> 注意：为了能接收隐式Intent，你必须将CATEGORY_DEFAULT这个category加入intent filter中。因为隐式Intent默认分类就是CATEGORY_DEFAULT\n\n## 在你的Activity中处理传递过来的Intent\n\n为了决定你的Activity如何处理不同的Action，你可以从Intent中获取到Action进行处理。\n当你的Activity启动时，可以调用getIntent（）获取到启动Activity的Intent。\n举个栗子：\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.main);\n\n    // Get the intent that started this activity\n    Intent intent = getIntent();\n    Uri data = intent.getData();\n\n    // Figure out what to do based on the intent type\n    if (intent.getType().indexOf(\"image/\") != -1) {\n        // Handle intents with image data ...\n    } else if (intent.getType().equals(\"text/plain\")) {\n        // Handle intents with text ...\n    }\n}\n```\n\n## 返回一个结果\n如果你想将执行结果返回给拉起你的Actvity，只要简单的调用setResult（），指定返回码和Intent。当操作结束需要返回到原来的Activity时，需要调用finish()结束你的Activity。\n举个栗子：\n```\n// Create intent to deliver some kind of result data\nIntent result = new Intent(\"com.example.RESULT_ACTION\", Uri.parse(\"content://result_uri\");\nsetResult(Activity.RESULT_OK, result);\nfinish()\n```\n你必须指定一个返回码。通常都是RESULT_OK 或者 RESULT_CANCELED。你还可以用Intent带上额外的数据。\n\n>注意：返回结果默认返回码是RESULT_CANCELED，因此，如果用户在完成动作且你设置返回结果之前按下返回键，原来的Acitvity会接受到“cancel”的结果\n\n\n\n\n","source":"_posts/【Android training】允许其他应用拉起你的应用.md","raw":"layout: hexo\ntitle: 【Android training】引导到另一个APP\ndate: 2015-11-5 20:30:22\ntags: Android training 翻译\n\n---\n\n原文地址：[Allowing Other Apps to Start Your Activity](http://developer.android.com/training/basics/intents/filters.html)\n\n为了让别的应用能拉起你的应用，你需要在你的AndroidMainfest.xml中对应的`<activity>`组件里添加`<intent-filter>`。\n当你的应用安装在设备时，系统会识别你的intent filter然后添加到内置的目录里。当APP使用隐式Intent调用startActivity()或者startActivityForResult（）时，系统会找到哪些应用能接收这个Intent。\n\n## 添加一个Intent Filter\n\n为了合适地定义你的应用中的Activity所能处理的Intent,每个添加的Intent Filter都需要尽可能地具体。\n一个标准的Intent包含以下元素：\n\n### Action\n将要执行的动作名称，规定在你的`<action>`标签中\n### Data\n描述所需传递的数据，规定在你的`<data>`标签中。可以用多个属性规定这个元素，比如说MIME类型，uri前缀，uri scheme，或者是这些属性的组合或者重复。\n### Category\n提供一种附加的方法来标识activity如何处理这个Intent，通常和用户的手势位置从哪儿开始有关。系统支持多种不同的分类，但是大部分很少用的到。**但是，所有隐式Intent默认被定义成CATEGORY_DEFAULT**\n\n举个栗子，这是一个能接收ACTION_SEND动作，文字或者图像作为数据的Activity：\n```\n<activity android:name=\"ShareActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.SEND\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <data android:mimeType=\"text/plain\"/>\n        <data android:mimeType=\"image/*\"/>\n    </intent-filter>\n</activity>\n```\n每个Intent只能确定一个Action和一种data类型，但`<intent-filter>`可以含有多个`<action>`, `<category>`, 和 `<data>`。\n\n> 注意：为了能接收隐式Intent，你必须将CATEGORY_DEFAULT这个category加入intent filter中。因为隐式Intent默认分类就是CATEGORY_DEFAULT\n\n## 在你的Activity中处理传递过来的Intent\n\n为了决定你的Activity如何处理不同的Action，你可以从Intent中获取到Action进行处理。\n当你的Activity启动时，可以调用getIntent（）获取到启动Activity的Intent。\n举个栗子：\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.main);\n\n    // Get the intent that started this activity\n    Intent intent = getIntent();\n    Uri data = intent.getData();\n\n    // Figure out what to do based on the intent type\n    if (intent.getType().indexOf(\"image/\") != -1) {\n        // Handle intents with image data ...\n    } else if (intent.getType().equals(\"text/plain\")) {\n        // Handle intents with text ...\n    }\n}\n```\n\n## 返回一个结果\n如果你想将执行结果返回给拉起你的Actvity，只要简单的调用setResult（），指定返回码和Intent。当操作结束需要返回到原来的Activity时，需要调用finish()结束你的Activity。\n举个栗子：\n```\n// Create intent to deliver some kind of result data\nIntent result = new Intent(\"com.example.RESULT_ACTION\", Uri.parse(\"content://result_uri\");\nsetResult(Activity.RESULT_OK, result);\nfinish()\n```\n你必须指定一个返回码。通常都是RESULT_OK 或者 RESULT_CANCELED。你还可以用Intent带上额外的数据。\n\n>注意：返回结果默认返回码是RESULT_CANCELED，因此，如果用户在完成动作且你设置返回结果之前按下返回键，原来的Acitvity会接受到“cancel”的结果\n\n\n\n\n","slug":"【Android training】允许其他应用拉起你的应用","published":1,"updated":"2016-04-29T07:32:34.645Z","comments":1,"photos":[],"link":"","_id":"cjajmn9tj000igg1krhvi02ur"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjajmn9s80001gg1kowfb5lr5","tag_id":"cjajmn9s80002gg1kx8pkoohk","_id":"cjajmn9s80003gg1knwsifple"},{"post_id":"cjajmn9so0004gg1khz6wu917","tag_id":"cjajmn9so0005gg1kruoffp44","_id":"cjajmn9so0006gg1kxd19qkex"},{"post_id":"cjajmn9t30008gg1khplmj65u","tag_id":"cjajmn9t30009gg1kokms6moa","_id":"cjajmn9t3000agg1kk8vpzzt8"},{"post_id":"cjajmn9t3000bgg1kej0p9m3u","tag_id":"cjajmn9t3000cgg1kwykrkxvm","_id":"cjajmn9t3000dgg1k80pkkt59"},{"post_id":"cjajmn9t3000egg1k05mkaidx","tag_id":"cjajmn9s80002gg1kx8pkoohk","_id":"cjajmn9tj000fgg1k2iuyyo57"},{"post_id":"cjajmn9tj000ggg1k8la2sxet","tag_id":"cjajmn9s80002gg1kx8pkoohk","_id":"cjajmn9tj000hgg1k80lp9hhn"},{"post_id":"cjajmn9tj000igg1krhvi02ur","tag_id":"cjajmn9s80002gg1kx8pkoohk","_id":"cjajmn9tj000jgg1ktrkkpjhz"}],"Tag":[{"name":"Android training 翻译","_id":"cjajmn9s80002gg1kx8pkoohk"},{"name":"电影人生","_id":"cjajmn9so0005gg1kruoffp44"},{"name":"游戏","_id":"cjajmn9t30009gg1kokms6moa"},{"name":"感悟","_id":"cjajmn9t3000cgg1kwykrkxvm"}]}}