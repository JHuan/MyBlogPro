{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/avatar/tom.jpg","path":"avatar/tom.jpg","modified":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/bali.jpg","path":"css/images/bali.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/_posts/Hexo使用笔记（一）.md","shasum":"edacd512fbec180b4e4adb9da0cdfb9a034e3a84","modified":1444914136000},{"_id":"source/_posts/【Android training】允许其他应用拉起你的应用.md","shasum":"ab13d089a8242b3a1c2e80672ddcfde0c3cf7789","modified":1447070879000},{"_id":"source/_posts/【Android training】引导到另一个APP.md","shasum":"807a2742b70b1e0d759448e8c542da80cdc4bcd7","modified":1446725555000},{"_id":"source/_posts/【Android training】文件共享.md","shasum":"bf93dce2f37b76d0a30579bc2cd5d9b906184730","modified":1449491623000},{"_id":"source/_posts/序.md","shasum":"f88c4c23c6e5d225bdf2b7fb926d35349f4c3c07","modified":1450958298000},{"_id":"source/avatar/tom.jpg","shasum":"321e5aa23d29ffea43f3c9114123506be052e6cf","modified":1446465121000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1443013256000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1443013256000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1443013256000},{"_id":"themes/landscape/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"bde5b5ff598eb952f12e76199b0fa5dd0982c114","modified":1452775715000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/share.ejs","shasum":"74c037a3d028ee3de7f07c8ac765eadfb26efd21","modified":1452860613000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1443013256000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1443013256000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1443013256000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1443013256000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1443013256000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1443013256000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1443013256000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1443013256000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1443013256000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1443013256000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1443013256000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1443013256000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1443013256000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1443013256000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1443013256000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1443013256000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"8df75ea6f414f5ad42b47eb52e7d2d1c56a257ab","modified":1450959217000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1443013256000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1443013256000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1443013256000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1443013256000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"ae4d401dcdd9e8d99126c8e3efdcd1ddeca49ab9","modified":1446809530000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1443013256000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1443013256000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1443013256000},{"_id":"themes/landscape/source/css/style.styl","shasum":"c42c526f4e2bb44aec8fc96030ffd000145c5117","modified":1447071014000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1443013256000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1443013256000},{"_id":"themes/landscape/source/js/script.js","shasum":"18c3873088e43e39d8bef738ad698fd5315d60fb","modified":1452861442000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1443013256000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1443013256000},{"_id":"themes/landscape/source/css/images/bali.jpg","shasum":"9a1da2d30d91a907c8f27b6310dce4600a1b70fa","modified":1446725199000},{"_id":"public/avatar/tom.jpg","modified":1452775724575,"shasum":"321e5aa23d29ffea43f3c9114123506be052e6cf"},{"_id":"public/js/script.js","modified":1452861449369,"shasum":"18c3873088e43e39d8bef738ad698fd5315d60fb"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1452775724580,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1452775724581,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1452775724583,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1452775724584,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1452775724588,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1452775724590,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1452775724591,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1452775724592,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1452775724594,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1452775724595,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1452775724596,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1452775724597,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1452775724600,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1452775724602,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1452775724605,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1452775725051,"shasum":"eee8ed7b864c0dec5493b96bb0ee47133e7a75ba"},{"_id":"public/css/images/bali.jpg","modified":1452775725294,"shasum":"9a1da2d30d91a907c8f27b6310dce4600a1b70fa"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1452775725307,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1452775725309,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1452775725311,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1452775725312,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1452775725314,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2015/12/24/序/index.html","modified":1452860626866,"shasum":"3219678cedb671f5df441f93f715bb3537338db4"},{"_id":"public/2015/11/05/【Android training】允许其他应用拉起你的应用/index.html","modified":1452860626881,"shasum":"d6dfc5106c183c5c391869c0741b9277bcd5a3bb"},{"_id":"public/2015/10/30/【Android training】文件共享/index.html","modified":1452860626909,"shasum":"3ba60ec566681864b148179c9d3dd1bfe8164f89"},{"_id":"public/2015/10/30/【Android training】引导到另一个APP/index.html","modified":1452860626917,"shasum":"4a99b298d9b36db7a6a5c730bb81481ec7a43cfc"},{"_id":"public/2015/10/15/Hexo使用笔记（一）/index.html","modified":1452860626922,"shasum":"54d09c02be1be8f0f2dcb6d2e22755345a34c25a"},{"_id":"public/tags/感悟/index.html","modified":1452860626944,"shasum":"9796d7fd4aed4f9542daa10c2ed0aaeab189f572"},{"_id":"public/tags/Android-training-翻译/index.html","modified":1452860626949,"shasum":"4b95d46205045a4661b771458c9b6848234c92e6"},{"_id":"public/index.html","modified":1452860626940,"shasum":"02dc19061a9d7862f9c2443f2d48ed5259cdba83"},{"_id":"public/archives/index.html","modified":1452860626957,"shasum":"db20a35c58538ca4bff50a61c071236124e27ebb"},{"_id":"public/archives/2015/index.html","modified":1452860626964,"shasum":"d8fb1fbc1d6b958483ef0a67f963e29790738281"},{"_id":"public/archives/2015/10/index.html","modified":1452860626970,"shasum":"eadcad21795b19ab4662c3d1383f4633199326c4"},{"_id":"public/archives/2015/11/index.html","modified":1452860626973,"shasum":"3f0bcb1173d1dcf6c5a7c4d6b281c09b29986b9d"},{"_id":"public/archives/2015/12/index.html","modified":1452860626977,"shasum":"4242c7ca9d210fc40db7fe87a22b1aaf561199eb"}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"hexo","title":"Hexo使用笔记（一）","date":"2015-10-15T12:12:22.000Z","_content":"\n使用hexo的初衷很简单，别人家的博客系统要么界面low逼要么内容low逼，一旦有运营介入肯定就有广告。个人并不反对广告，但对于强插的中插广告或者大条幅的广告简直这种强奸眼球的做法是不能忍的。而且更多的目的是边学边用，深入浅出的用一个工具，比直接硬啃html+js+css+balalala....好玩的多。当时选择做程序员，图的就是好玩嘛~\n\n## Hexo简介\n\nHexo官网的一句概括：（Hexo官网网址：https://hexo.io/）\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用[Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n**Hexo的本质就是工具集成，集Markdown渲染、插件开发与远程部署的一个炫酷工具。**用来做一个简单优雅的静态博客就非常适合，如果想要炫酷到没朋友请用WordPress~\n\n顺便贴下作者的一篇博客感受下这位ACG爱好者的才（dou）气（bi）：[Hexo 颯爽登場！](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n\n## Hexo安装\n\n首先，你得有个.....\n不用女朋友啦别哭，就这些：\n[Node.js](http://nodejs.org/)\n[Git](http://git-scm.com/)\n\nOK,装完后我们就帅气的用以下命令解决：\n`$npm install -g hexo-cli`\n\n然后就搞定了，简直不能再帅...\n\n## Hexo 的HelloWorld\n\n由于先不急着了解Hexo的配置文件与目录结构，先把基本过程过一遍先~工具是先学会使用才去研究原理滴~\n```\n##建站\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n##生成\n$ hexo generate\n$ npm install hexo-server --save\n$ hexo server\n```\n\n在浏览器中打开[http://127.0.0.1:4000](http://127.0.0.1:4000),~duang~\nPS：重点说下hexo-server这个坑，由于网上很多教程是针对hexo 2.0，所以3.0以上的童鞋注意下。\n\n## Hexo 部署到gitcafe\nOK，本地环境妥妥的了~就可以考虑部署了。我选择gitcafe只因为速度问题大家懂得~\n\n1. 注册gitcafe账号\n这个自己整....\n2. 新建一个与自己用户名相同名字的项目\n不要像我一样为了炫酷取个与用户名不同的项目...否则会很麻烦。gitcafe的pages服务默认就是以用户名同名的项目。\n3. 生成gitcafe的SSH key\n这样你可以在~/.ssh下看到gitcafe，gitcafe.pub了\n```\n$ mkdir ~/.ssh\n$ ssh-keygen -t rsa -C \"你的邮箱@xxx.com\" -f ~/.ssh/gitcafe\n```\n4. 连接配置\n首先创建一个配置文件先~\t然后加上以下语句：\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n```\n$touch ~/.ssh/config\n```\n\n5. gitcafe上设置部署key\n将~/.ssh/文件夹下的GitCafe.pub中的内容复制到公钥框中即可。\n6. 修改_config.yml\n在末尾加上以下语句\n```\ndeploy:\n  type: git\n  repo: https://gitcafe.com/JHuan/JHuan.git,gitcafe-pages\n  ```\n  在hexo 3.0 type以后就只有git了没有github和gitcafe之分~\n7. 部署！\n终于等到你我还好没放弃\n`hexo d`\n如果一切顺利，你可以通过http://你的用户名.gitcafe.io访问你的博客了！\n\n\n## 那些坑\n如果你一切都顺利那祝贺你可以开始愉快的和hexo玩耍了\n如果你也不幸跟我一样踩坑了，看看以下有没能够帮助你的：\n\n1. 记得挂代理....\n感谢党感谢人民感谢GFW连npm都要帮我们墙掉那是有多爱我们。\n`$npm config set proxy=http://192.168.1.1:8080 `\n具体端口和代理地址请自行替换哈\n在公司办公网的童鞋记得ssh和git bash也要挂上代理哈\n\n2. 请勿在cmd中使用hexo\n如果你也跟我一样还在悲催的使用windows做开发，请记得在gitbash中使用hexo。如若不信你可以试下hexo deploy。\n\n\n","source":"_posts/Hexo使用笔记（一）.md","raw":"layout: hexo\ntitle: Hexo使用笔记（一）\ndate: 2015-10-15 20:12:22\ntags:\n---\n\n使用hexo的初衷很简单，别人家的博客系统要么界面low逼要么内容low逼，一旦有运营介入肯定就有广告。个人并不反对广告，但对于强插的中插广告或者大条幅的广告简直这种强奸眼球的做法是不能忍的。而且更多的目的是边学边用，深入浅出的用一个工具，比直接硬啃html+js+css+balalala....好玩的多。当时选择做程序员，图的就是好玩嘛~\n\n## Hexo简介\n\nHexo官网的一句概括：（Hexo官网网址：https://hexo.io/）\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用[Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n**Hexo的本质就是工具集成，集Markdown渲染、插件开发与远程部署的一个炫酷工具。**用来做一个简单优雅的静态博客就非常适合，如果想要炫酷到没朋友请用WordPress~\n\n顺便贴下作者的一篇博客感受下这位ACG爱好者的才（dou）气（bi）：[Hexo 颯爽登場！](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n\n## Hexo安装\n\n首先，你得有个.....\n不用女朋友啦别哭，就这些：\n[Node.js](http://nodejs.org/)\n[Git](http://git-scm.com/)\n\nOK,装完后我们就帅气的用以下命令解决：\n`$npm install -g hexo-cli`\n\n然后就搞定了，简直不能再帅...\n\n## Hexo 的HelloWorld\n\n由于先不急着了解Hexo的配置文件与目录结构，先把基本过程过一遍先~工具是先学会使用才去研究原理滴~\n```\n##建站\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n##生成\n$ hexo generate\n$ npm install hexo-server --save\n$ hexo server\n```\n\n在浏览器中打开[http://127.0.0.1:4000](http://127.0.0.1:4000),~duang~\nPS：重点说下hexo-server这个坑，由于网上很多教程是针对hexo 2.0，所以3.0以上的童鞋注意下。\n\n## Hexo 部署到gitcafe\nOK，本地环境妥妥的了~就可以考虑部署了。我选择gitcafe只因为速度问题大家懂得~\n\n1. 注册gitcafe账号\n这个自己整....\n2. 新建一个与自己用户名相同名字的项目\n不要像我一样为了炫酷取个与用户名不同的项目...否则会很麻烦。gitcafe的pages服务默认就是以用户名同名的项目。\n3. 生成gitcafe的SSH key\n这样你可以在~/.ssh下看到gitcafe，gitcafe.pub了\n```\n$ mkdir ~/.ssh\n$ ssh-keygen -t rsa -C \"你的邮箱@xxx.com\" -f ~/.ssh/gitcafe\n```\n4. 连接配置\n首先创建一个配置文件先~\t然后加上以下语句：\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n```\n$touch ~/.ssh/config\n```\n\n5. gitcafe上设置部署key\n将~/.ssh/文件夹下的GitCafe.pub中的内容复制到公钥框中即可。\n6. 修改_config.yml\n在末尾加上以下语句\n```\ndeploy:\n  type: git\n  repo: https://gitcafe.com/JHuan/JHuan.git,gitcafe-pages\n  ```\n  在hexo 3.0 type以后就只有git了没有github和gitcafe之分~\n7. 部署！\n终于等到你我还好没放弃\n`hexo d`\n如果一切顺利，你可以通过http://你的用户名.gitcafe.io访问你的博客了！\n\n\n## 那些坑\n如果你一切都顺利那祝贺你可以开始愉快的和hexo玩耍了\n如果你也不幸跟我一样踩坑了，看看以下有没能够帮助你的：\n\n1. 记得挂代理....\n感谢党感谢人民感谢GFW连npm都要帮我们墙掉那是有多爱我们。\n`$npm config set proxy=http://192.168.1.1:8080 `\n具体端口和代理地址请自行替换哈\n在公司办公网的童鞋记得ssh和git bash也要挂上代理哈\n\n2. 请勿在cmd中使用hexo\n如果你也跟我一样还在悲催的使用windows做开发，请记得在gitbash中使用hexo。如若不信你可以试下hexo deploy。\n\n\n","slug":"Hexo使用笔记（一）","published":1,"updated":"2015-10-15T13:02:16.000Z","comments":1,"photos":[],"link":"","_id":"cije95mlc0000vc1nt21todm7"},{"layout":"hexo","title":"序","date":"2015-12-24T11:53:22.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得当时刚在豆瓣开通账号时也写了个序，希望自己能保持记录的习惯，保持思考的习惯，但很遗憾，停了好长的一段时间没有动笔，或者干脆写了一半便再也写不下去，那心血来潮的文字便成了个doc放在硬盘里长眠。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这年头哪里还缺文章，哪里还缺秀自己的感悟，哪里还稀罕微不足道的普通人的一点微不足道的感触。就算是花了大量时间好不容易写出一篇自我感觉还不错的文章，网上随便一找就可以完虐，所有的成就感灰飞烟灭。\n然而正如寒门难出贵子一样，难并不等于绝对不可能，况且写作的含义并不仅仅限于一种给别人有用的分享或者给自己的无懈可击的总结，它是一段时光的证明，是记录生活一种无法取代的方式。尽管我有了相机之后回去用图片记录，有了朋友圈之后可以碎片化记录，但始终没有用写作去记录更有质感和真实感，它已成为我不可或缺的一种生活方式。尽管再忙，尽管很难坚持每天都写，尽管很难保证高质量的分享，但不应该成为不写作的借口\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以再起一个序，用自己的博客来写，更有动力和追求。愿自己在后续的道路上，勿忘初心，做好一个普通人应该做的事，做好自己喜欢的事。","source":"_posts/序.md","raw":"layout: hexo\ntitle: 序\ndate: 2015-12-24 19:53:22\ntags: 感悟\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得当时刚在豆瓣开通账号时也写了个序，希望自己能保持记录的习惯，保持思考的习惯，但很遗憾，停了好长的一段时间没有动笔，或者干脆写了一半便再也写不下去，那心血来潮的文字便成了个doc放在硬盘里长眠。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这年头哪里还缺文章，哪里还缺秀自己的感悟，哪里还稀罕微不足道的普通人的一点微不足道的感触。就算是花了大量时间好不容易写出一篇自我感觉还不错的文章，网上随便一找就可以完虐，所有的成就感灰飞烟灭。\n然而正如寒门难出贵子一样，难并不等于绝对不可能，况且写作的含义并不仅仅限于一种给别人有用的分享或者给自己的无懈可击的总结，它是一段时光的证明，是记录生活一种无法取代的方式。尽管我有了相机之后回去用图片记录，有了朋友圈之后可以碎片化记录，但始终没有用写作去记录更有质感和真实感，它已成为我不可或缺的一种生活方式。尽管再忙，尽管很难坚持每天都写，尽管很难保证高质量的分享，但不应该成为不写作的借口\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以再起一个序，用自己的博客来写，更有动力和追求。愿自己在后续的道路上，勿忘初心，做好一个普通人应该做的事，做好自己喜欢的事。","slug":"序","published":1,"updated":"2015-12-24T11:58:18.000Z","comments":1,"photos":[],"link":"","_id":"cije95mlj0001vc1nj7h44y6e"},{"layout":"hexo","title":"【Android training】文件共享","date":"2015-10-30T12:12:22.000Z","_content":"原文地址：[Sharing Files](http://developer.android.com/training/secure-file-sharing/index.html).\n\n\n为了能安全的将一个文件提供给另一个APP，你需要配置好你的APP，给文件提供一个安全的句柄。Android 组件 [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 基于XML配置，为文件生成内容URI。\n\n>  Tips: [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 已经作为 [v4 Support Library](http://developer.android.com/tools/support-library/features.html#v4)的一部分了哟~\n\n## 声明一个FileProvider\n\n定义一个FileProvider需要在你的mainfest中添加一个入口。这个入口声明了生成内容URI的authorities以及XML文件的名字。这个XML文件确定了你的APP能分享的目录。\n以下是个栗子：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n在这个栗子中，[android:authorities](http://developer.android.com/guide/topics/manifest/provider-element.html#auth)属性规定了URL所属的authorities,用于FileProvider生成content uri。meta-data 子元素指向了你想分享出去的XML文件，android:resource指定这个文件的路径和名称（并不包括.xml后缀名哟）\n\n## 指定要分享的目录\n当你把FileProvider加入到你的app的Mainfest中后，你需要指定你所要分享的文件所属目录。需要在你的项目目录下 res/xml/创建filepaths.xml 。在这个文件中通过增加XML元素表示你的目录。以下又是一颗栗子：\n```\n<paths>\n    <files-path path=\"images/\" name=\"myimages\" />\n</paths>\n```\n在这个栗子中，files-path 标签共享了你的应用内部存储里的files/. path属性表明分享files/目录下的子目录images/。name属性让FileFileProvider在生成的content URI加上由name指定的路径分隔符。详情可以看看[FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 为何可以这么做。\n`<paths>`元素可以有多个子元素，确定多个需要共享的文件夹。除了`<files-path>`标签之外，还可以用`<external-path>`元素共享外部存储文件夹，并且还可以用`<cache-path>`分享内部存储的缓存文件夹。\n\n> 注意： 只能用XML文件的形式来制定你要分享到文件夹，你不能通过java代码的形式动态加一个文件夹\n\n现在呢，你就有一个完整的FileProvider，它能帮你生成你应用内部存储中的files/目录及其子目录下文件的content URI。\n再举个栗子，如果你按照上面的代码片段定义了一个FileProvider，然后你请求一个default_image.jpg的URI，FileProvider就会返回如下URI：\n`content://com.example.myapp.fileprovider/myimages/default_image.jpg`\n\n## 接收文件分享请求\n为了能接收请求方APP的文件请求并响应对应的文件content uri，你应该提供一个文件选择Activity。这样的话请求方APP可以通过startActivityForResult启动这个Activity，传递一个带ACTION_PICK的action的Intent，该Activity接收并处理完毕要嗝屁时，就可以通过setResult反馈uri。\n\n## 创建一个文件选择的Activity\n\n直接上代码说明：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n        <application>\n        ...\n            <activity\n                android:name=\".FileSelectActivity\"\n                android:label=\"@\"File Selector\" >\n                <intent-filter>\n                    <action\n                        android:name=\"android.intent.action.PICK\"/>\n                        //指定OPENABLE和DEFAULT两种类型\n                    <category\n                        android:name=\"android.intent.category.DEFAULT\"/>\n                    <category\n                        android:name=\"android.intent.category.OPENABLE\"/>\n                        //通过mimeType制定所需数据类型\n                    <data android:mimeType=\"text/plain\"/>\n                    <data android:mimeType=\"image/*\"/>\n                </intent-filter>\n            </activity>\n```\n\n## 访问分享的文件\n\n接收方APP会用Intent向请求方发送共享文件的uri，这个Intent将会被传递到请求方的onActivityResult()里。当请求方拿到了文件的cotent uri, 可以通过[FileDescriptor](http://developer.android.com/reference/java/io/FileDescriptor.html)访问共享文件。\n在这个过程中，文件访问安全性是得到保证滴。由于content uri不包含目录路径，请求方不能获取到接收方其他的文件。\n以下是个栗子~\n```\n  /*\n     * When the Activity of the app that hosts files sets a result and calls\n     * finish(), this method is invoked. The returned Intent contains the\n     * content URI of a selected file. The result code indicates if the\n     * selection worked or not.\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode,\n            Intent returnIntent) {\n        // If the selection didn't work\n        if (resultCode != RESULT_OK) {\n            // Exit without doing anything else\n            return;\n        } else {\n            // Get the file's content URI from the incoming Intent\n            Uri returnUri = returnIntent.getData();\n            /*\n             * Try to open the file for \"read\" access using the\n             * returned URI. If the file isn't found, write to the\n             * error log and return.\n             */\n            try {\n                /*\n                 * Get the content resolver instance for this context, and use it\n                 * to get a ParcelFileDescriptor for the file.\n                 */\n                mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n                Log.e(\"MainActivity\", \"File not found.\");\n                return;\n            }\n            // Get a regular file descriptor for the file\n            FileDescriptor fd = mInputPFD.getFileDescriptor();\n            ...\n        }\n    }\n```\n\n## 获取共享文件的MIME格式\n一个文件的数据格式可以表示请求方APP该如何处理该文件内容。我们可以通过调用ContentResolver.getType()来获取共享文件的数据类型，这个方法反馈该文件的MIME类型。**FileProvider默认用文件的后缀名来判断文件所属数据类型**。\n以下是个栗子：\n```\n    /*\n     * Get the file's content URI from the incoming Intent, then\n     * get the file's MIME type\n     */\n    Uri returnUri = returnIntent.getData();\n    String mimeType = getContentResolver().getType(returnUri);\n```\n\n## 获取共享文件的名字和大小\nFileProvider 有着query() 接口的默认实现，返回一个带着文件大小和名字的Curosr。默认返回两列：\n\n- DISPLAY_NAME\n    文件名，返回值与File.getName()相同\n- SIZE\n 文件大小，返回值和File.length()相同\n\n以下就是个获取的栗子：\n\n```\n /*\n     * Get the file's content URI from the incoming Intent,\n     * then query the server app to get the file's display name\n     * and size.\n     */\n    Uri returnUri = returnIntent.getData();\n    Cursor returnCursor =\n            getContentResolver().query(returnUri, null, null, null, null);\n    /*\n     * Get the column indexes of the data in the Cursor,\n     * move to the first row in the Cursor, get the data,\n     * and display it.\n     */\n    int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n    int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n    returnCursor.moveToFirst();\n    TextView nameView = (TextView) findViewById(R.id.filename_text);\n    TextView sizeView = (TextView) findViewById(R.id.filesize_text);\n    nameView.setText(returnCursor.getString(nameIndex));\n    sizeView.setText(Long.toString(returnCursor.getLong(sizeIndex)));\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【Android training】文件共享.md","raw":"layout: hexo\ntitle: 【Android training】文件共享\ndate: 2015-10-30 20:12:22\ntags: Android training 翻译\n---\n原文地址：[Sharing Files](http://developer.android.com/training/secure-file-sharing/index.html).\n\n\n为了能安全的将一个文件提供给另一个APP，你需要配置好你的APP，给文件提供一个安全的句柄。Android 组件 [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 基于XML配置，为文件生成内容URI。\n\n>  Tips: [FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 已经作为 [v4 Support Library](http://developer.android.com/tools/support-library/features.html#v4)的一部分了哟~\n\n## 声明一个FileProvider\n\n定义一个FileProvider需要在你的mainfest中添加一个入口。这个入口声明了生成内容URI的authorities以及XML文件的名字。这个XML文件确定了你的APP能分享的目录。\n以下是个栗子：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n在这个栗子中，[android:authorities](http://developer.android.com/guide/topics/manifest/provider-element.html#auth)属性规定了URL所属的authorities,用于FileProvider生成content uri。meta-data 子元素指向了你想分享出去的XML文件，android:resource指定这个文件的路径和名称（并不包括.xml后缀名哟）\n\n## 指定要分享的目录\n当你把FileProvider加入到你的app的Mainfest中后，你需要指定你所要分享的文件所属目录。需要在你的项目目录下 res/xml/创建filepaths.xml 。在这个文件中通过增加XML元素表示你的目录。以下又是一颗栗子：\n```\n<paths>\n    <files-path path=\"images/\" name=\"myimages\" />\n</paths>\n```\n在这个栗子中，files-path 标签共享了你的应用内部存储里的files/. path属性表明分享files/目录下的子目录images/。name属性让FileFileProvider在生成的content URI加上由name指定的路径分隔符。详情可以看看[FileProvider](http://developer.android.com/reference/android/support/v4/content/FileProvider.html) 为何可以这么做。\n`<paths>`元素可以有多个子元素，确定多个需要共享的文件夹。除了`<files-path>`标签之外，还可以用`<external-path>`元素共享外部存储文件夹，并且还可以用`<cache-path>`分享内部存储的缓存文件夹。\n\n> 注意： 只能用XML文件的形式来制定你要分享到文件夹，你不能通过java代码的形式动态加一个文件夹\n\n现在呢，你就有一个完整的FileProvider，它能帮你生成你应用内部存储中的files/目录及其子目录下文件的content URI。\n再举个栗子，如果你按照上面的代码片段定义了一个FileProvider，然后你请求一个default_image.jpg的URI，FileProvider就会返回如下URI：\n`content://com.example.myapp.fileprovider/myimages/default_image.jpg`\n\n## 接收文件分享请求\n为了能接收请求方APP的文件请求并响应对应的文件content uri，你应该提供一个文件选择Activity。这样的话请求方APP可以通过startActivityForResult启动这个Activity，传递一个带ACTION_PICK的action的Intent，该Activity接收并处理完毕要嗝屁时，就可以通过setResult反馈uri。\n\n## 创建一个文件选择的Activity\n\n直接上代码说明：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n        <application>\n        ...\n            <activity\n                android:name=\".FileSelectActivity\"\n                android:label=\"@\"File Selector\" >\n                <intent-filter>\n                    <action\n                        android:name=\"android.intent.action.PICK\"/>\n                        //指定OPENABLE和DEFAULT两种类型\n                    <category\n                        android:name=\"android.intent.category.DEFAULT\"/>\n                    <category\n                        android:name=\"android.intent.category.OPENABLE\"/>\n                        //通过mimeType制定所需数据类型\n                    <data android:mimeType=\"text/plain\"/>\n                    <data android:mimeType=\"image/*\"/>\n                </intent-filter>\n            </activity>\n```\n\n## 访问分享的文件\n\n接收方APP会用Intent向请求方发送共享文件的uri，这个Intent将会被传递到请求方的onActivityResult()里。当请求方拿到了文件的cotent uri, 可以通过[FileDescriptor](http://developer.android.com/reference/java/io/FileDescriptor.html)访问共享文件。\n在这个过程中，文件访问安全性是得到保证滴。由于content uri不包含目录路径，请求方不能获取到接收方其他的文件。\n以下是个栗子~\n```\n  /*\n     * When the Activity of the app that hosts files sets a result and calls\n     * finish(), this method is invoked. The returned Intent contains the\n     * content URI of a selected file. The result code indicates if the\n     * selection worked or not.\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode,\n            Intent returnIntent) {\n        // If the selection didn't work\n        if (resultCode != RESULT_OK) {\n            // Exit without doing anything else\n            return;\n        } else {\n            // Get the file's content URI from the incoming Intent\n            Uri returnUri = returnIntent.getData();\n            /*\n             * Try to open the file for \"read\" access using the\n             * returned URI. If the file isn't found, write to the\n             * error log and return.\n             */\n            try {\n                /*\n                 * Get the content resolver instance for this context, and use it\n                 * to get a ParcelFileDescriptor for the file.\n                 */\n                mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n                Log.e(\"MainActivity\", \"File not found.\");\n                return;\n            }\n            // Get a regular file descriptor for the file\n            FileDescriptor fd = mInputPFD.getFileDescriptor();\n            ...\n        }\n    }\n```\n\n## 获取共享文件的MIME格式\n一个文件的数据格式可以表示请求方APP该如何处理该文件内容。我们可以通过调用ContentResolver.getType()来获取共享文件的数据类型，这个方法反馈该文件的MIME类型。**FileProvider默认用文件的后缀名来判断文件所属数据类型**。\n以下是个栗子：\n```\n    /*\n     * Get the file's content URI from the incoming Intent, then\n     * get the file's MIME type\n     */\n    Uri returnUri = returnIntent.getData();\n    String mimeType = getContentResolver().getType(returnUri);\n```\n\n## 获取共享文件的名字和大小\nFileProvider 有着query() 接口的默认实现，返回一个带着文件大小和名字的Curosr。默认返回两列：\n\n- DISPLAY_NAME\n    文件名，返回值与File.getName()相同\n- SIZE\n 文件大小，返回值和File.length()相同\n\n以下就是个获取的栗子：\n\n```\n /*\n     * Get the file's content URI from the incoming Intent,\n     * then query the server app to get the file's display name\n     * and size.\n     */\n    Uri returnUri = returnIntent.getData();\n    Cursor returnCursor =\n            getContentResolver().query(returnUri, null, null, null, null);\n    /*\n     * Get the column indexes of the data in the Cursor,\n     * move to the first row in the Cursor, get the data,\n     * and display it.\n     */\n    int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n    int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n    returnCursor.moveToFirst();\n    TextView nameView = (TextView) findViewById(R.id.filename_text);\n    TextView sizeView = (TextView) findViewById(R.id.filesize_text);\n    nameView.setText(returnCursor.getString(nameIndex));\n    sizeView.setText(Long.toString(returnCursor.getLong(sizeIndex)));\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"【Android training】文件共享","published":1,"updated":"2015-12-07T12:33:43.000Z","comments":1,"photos":[],"link":"","_id":"cije95mlm0004vc1n0s0x5t5e"},{"layout":"hexo","title":"【Android training】引导到另一个APP","date":"2015-10-30T12:12:22.000Z","_content":"\nAndroid最重要的一个特性就是可以通过action引导到其他APP里去了。比如说你想在你的APP中将一些地址显示在地图上，你无需专门搞个activity显示地图，你可以用带有地址信息的Intent发起请求，Android系统就会拉起一个APP去做到这点。\n\n## 用隐式Intent\n隐式Intent无需你指定具体的Class，把指定的action(比如view, edit, send, or get)，再把数据带上就欧啦。\n\n以下是一些例子：\n```\n//打电话\nUri number = Uri.parse(\"tel:5551234\");\nIntent callIntent = new Intent(Intent.ACTION_DIAL, number);\n//用地图\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nUri location = Uri.parse(\"geo:37.422219,-122.08364?z=14\"); \nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n//浏览网页\nUri webpage = Uri.parse(\"http://www.android.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);\n```\n\n## 看看有没应用可以接受俺们的Intent\n\n尽管Android系统保证肯定有个内置应用（比如电话，电邮，日历等）会接受俺们的Intent,但你始终应该在使用这个Intent之前要确认下。\n\n>注意：如果你作死使用了一个根本没有应用能接受的Intent，你的APP会Crash的！(ノಠ益ಠ)ノ彡┻━┻\n\n调用queryIntentActivities()就可以获得能接受你的Intent的应用列表，如果返回的不是空列表你就能安心使用这个Intent啦，\\(^o^)/YES!\n```\nPackageManager packageManager = getPackageManager();\nList activities = packageManager.queryIntentActivities(intent,\n        PackageManager.MATCH_DEFAULT_ONLY);\nboolean isIntentSafe = activities.size() > 0;\n```\n如果isIntent是true，那就至少有一个应用能接受你的Intent啦\n\n##用你的Intent拉起一个Activity\n\n当你创建好Intent塞进了数据之后，便可以调用startActivity了。如果系统识别到有多个APP可以处理你的Intent,系统会展示一个对话框供用户选择哪个APP打开，如果只有一个APP能处理你的Intent，那就会立刻被打开。\n\n![pic 1](http://developer.android.com/images/training/basics/intents-choice.png \"pic1:供你选择拉起的APP对话框长这样~\")\n\n以下是个完整的例子，演示如何创建一个可以拉起地图应用的intent，然后退出应用拉起地图：\n\n```\n// Build the intent\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n\n// Verify it resolves\nPackageManager packageManager = getPackageManager();\nList<ResolveInfo> activities = packageManager.queryIntentActivities(mapIntent, 0);\nboolean isIntentSafe = activities.size() > 0;\n\n// Start an activity if it's safe\nif (isIntentSafe) {\n    startActivity(mapIntent);\n}\n```\n![pic 2](http://developer.android.com/images/training/basics/intent-chooser.png)\n\n## 显示一个应用选择对话框\n\n可以注意得到当你使用startActivity（）将你的Intent传递到另一个app并且不止一个app可以接收你的Intent时，用户可以通过一个应用选择对话框来决定使用哪个应用，并且能够选择哪个应用作为默认打开方式。如果场景是浏览网页或者拍照那还是个不错的选择。\n\n但是，有些场景可能用户更需要每次都使用不同的app作为打开方式，比如说“分享”。这时你应该强制显示应用选择对话框让用户每次打开时选择使用哪个APP。\n\n\n\n\n```\nIntent intent = new Intent(Intent.ACTION_SEND);\n...\n\n// Always use string resources for UI text.\n// This says something like \"Share this photo with\"\nString title = getResources().getString(R.string.chooser_title);\n// Create intent to show chooser\nIntent chooser = Intent.createChooser(intent, title);\n\n// Verify the intent will resolve to at least one activity\nif (intent.resolveActivity(getPackageManager()) != null) {\n    startActivity(chooser);\n}\n```\n\n\n\n\n \n \n\n\n\n\n\n","source":"_posts/【Android training】引导到另一个APP.md","raw":"layout: hexo\ntitle: 【Android training】引导到另一个APP\ndate: 2015-10-30 20:12:22\ntags: Android training 翻译\n---\n\nAndroid最重要的一个特性就是可以通过action引导到其他APP里去了。比如说你想在你的APP中将一些地址显示在地图上，你无需专门搞个activity显示地图，你可以用带有地址信息的Intent发起请求，Android系统就会拉起一个APP去做到这点。\n\n## 用隐式Intent\n隐式Intent无需你指定具体的Class，把指定的action(比如view, edit, send, or get)，再把数据带上就欧啦。\n\n以下是一些例子：\n```\n//打电话\nUri number = Uri.parse(\"tel:5551234\");\nIntent callIntent = new Intent(Intent.ACTION_DIAL, number);\n//用地图\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nUri location = Uri.parse(\"geo:37.422219,-122.08364?z=14\"); \nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n//浏览网页\nUri webpage = Uri.parse(\"http://www.android.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);\n```\n\n## 看看有没应用可以接受俺们的Intent\n\n尽管Android系统保证肯定有个内置应用（比如电话，电邮，日历等）会接受俺们的Intent,但你始终应该在使用这个Intent之前要确认下。\n\n>注意：如果你作死使用了一个根本没有应用能接受的Intent，你的APP会Crash的！(ノಠ益ಠ)ノ彡┻━┻\n\n调用queryIntentActivities()就可以获得能接受你的Intent的应用列表，如果返回的不是空列表你就能安心使用这个Intent啦，\\(^o^)/YES!\n```\nPackageManager packageManager = getPackageManager();\nList activities = packageManager.queryIntentActivities(intent,\n        PackageManager.MATCH_DEFAULT_ONLY);\nboolean isIntentSafe = activities.size() > 0;\n```\n如果isIntent是true，那就至少有一个应用能接受你的Intent啦\n\n##用你的Intent拉起一个Activity\n\n当你创建好Intent塞进了数据之后，便可以调用startActivity了。如果系统识别到有多个APP可以处理你的Intent,系统会展示一个对话框供用户选择哪个APP打开，如果只有一个APP能处理你的Intent，那就会立刻被打开。\n\n![pic 1](http://developer.android.com/images/training/basics/intents-choice.png \"pic1:供你选择拉起的APP对话框长这样~\")\n\n以下是个完整的例子，演示如何创建一个可以拉起地图应用的intent，然后退出应用拉起地图：\n\n```\n// Build the intent\nUri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\n\n// Verify it resolves\nPackageManager packageManager = getPackageManager();\nList<ResolveInfo> activities = packageManager.queryIntentActivities(mapIntent, 0);\nboolean isIntentSafe = activities.size() > 0;\n\n// Start an activity if it's safe\nif (isIntentSafe) {\n    startActivity(mapIntent);\n}\n```\n![pic 2](http://developer.android.com/images/training/basics/intent-chooser.png)\n\n## 显示一个应用选择对话框\n\n可以注意得到当你使用startActivity（）将你的Intent传递到另一个app并且不止一个app可以接收你的Intent时，用户可以通过一个应用选择对话框来决定使用哪个应用，并且能够选择哪个应用作为默认打开方式。如果场景是浏览网页或者拍照那还是个不错的选择。\n\n但是，有些场景可能用户更需要每次都使用不同的app作为打开方式，比如说“分享”。这时你应该强制显示应用选择对话框让用户每次打开时选择使用哪个APP。\n\n\n\n\n```\nIntent intent = new Intent(Intent.ACTION_SEND);\n...\n\n// Always use string resources for UI text.\n// This says something like \"Share this photo with\"\nString title = getResources().getString(R.string.chooser_title);\n// Create intent to show chooser\nIntent chooser = Intent.createChooser(intent, title);\n\n// Verify the intent will resolve to at least one activity\nif (intent.resolveActivity(getPackageManager()) != null) {\n    startActivity(chooser);\n}\n```\n\n\n\n\n \n \n\n\n\n\n\n","slug":"【Android training】引导到另一个APP","published":1,"updated":"2015-11-05T12:12:35.000Z","comments":1,"photos":[],"link":"","_id":"cije95mlp0007vc1no2pxtnta"},{"layout":"hexo","title":"【Android training】引导到另一个APP","date":"2015-11-05T12:30:22.000Z","_content":"\n原文地址：[Allowing Other Apps to Start Your Activity](http://developer.android.com/training/basics/intents/filters.html)\n\n为了让别的应用能拉起你的应用，你需要在你的AndroidMainfest.xml中对应的`<activity>`组件里添加`<intent-filter>`。\n当你的应用安装在设备时，系统会识别你的intent filter然后添加到内置的目录里。当APP使用隐式Intent调用startActivity()或者startActivityForResult（）时，系统会找到哪些应用能接收这个Intent。\n\n## 添加一个Intent Filter\n\n为了合适地定义你的应用中的Activity所能处理的Intent,每个添加的Intent Filter都需要尽可能地具体。\n一个标准的Intent包含以下元素：\n\n### Action\n将要执行的动作名称，规定在你的`<action>`标签中\n### Data\n描述所需传递的数据，规定在你的`<data>`标签中。可以用多个属性规定这个元素，比如说MIME类型，uri前缀，uri scheme，或者是这些属性的组合或者重复。\n### Category\n提供一种附加的方法来标识activity如何处理这个Intent，通常和用户的手势位置从哪儿开始有关。系统支持多种不同的分类，但是大部分很少用的到。**但是，所有隐式Intent默认被定义成CATEGORY_DEFAULT**\n\n举个栗子，这是一个能接收ACTION_SEND动作，文字或者图像作为数据的Activity：\n```\n<activity android:name=\"ShareActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.SEND\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <data android:mimeType=\"text/plain\"/>\n        <data android:mimeType=\"image/*\"/>\n    </intent-filter>\n</activity>\n```\n每个Intent只能确定一个Action和一种data类型，但`<intent-filter>`可以含有多个`<action>`, `<category>`, 和 `<data>`。\n\n> 注意：为了能接收隐式Intent，你必须将CATEGORY_DEFAULT这个category加入intent filter中。因为隐式Intent默认分类就是CATEGORY_DEFAULT\n\n## 在你的Activity中处理传递过来的Intent\n\n为了决定你的Activity如何处理不同的Action，你可以从Intent中获取到Action进行处理。\n当你的Activity启动时，可以调用getIntent（）获取到启动Activity的Intent。\n举个栗子：\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.main);\n\n    // Get the intent that started this activity\n    Intent intent = getIntent();\n    Uri data = intent.getData();\n\n    // Figure out what to do based on the intent type\n    if (intent.getType().indexOf(\"image/\") != -1) {\n        // Handle intents with image data ...\n    } else if (intent.getType().equals(\"text/plain\")) {\n        // Handle intents with text ...\n    }\n}\n```\n\n## 返回一个结果\n如果你想将执行结果返回给拉起你的Actvity，只要简单的调用setResult（），指定返回码和Intent。当操作结束需要返回到原来的Activity时，需要调用finish()结束你的Activity。\n举个栗子：\n```\n// Create intent to deliver some kind of result data\nIntent result = new Intent(\"com.example.RESULT_ACTION\", Uri.parse(\"content://result_uri\");\nsetResult(Activity.RESULT_OK, result);\nfinish()\n```\n你必须指定一个返回码。通常都是RESULT_OK 或者 RESULT_CANCELED。你还可以用Intent带上额外的数据。\n\n>注意：返回结果默认返回码是RESULT_CANCELED，因此，如果用户在完成动作且你设置返回结果之前按下返回键，原来的Acitvity会接受到“cancel”的结果\n\n\n\n\n","source":"_posts/【Android training】允许其他应用拉起你的应用.md","raw":"layout: hexo\ntitle: 【Android training】引导到另一个APP\ndate: 2015-11-5 20:30:22\ntags: Android training 翻译\n\n---\n\n原文地址：[Allowing Other Apps to Start Your Activity](http://developer.android.com/training/basics/intents/filters.html)\n\n为了让别的应用能拉起你的应用，你需要在你的AndroidMainfest.xml中对应的`<activity>`组件里添加`<intent-filter>`。\n当你的应用安装在设备时，系统会识别你的intent filter然后添加到内置的目录里。当APP使用隐式Intent调用startActivity()或者startActivityForResult（）时，系统会找到哪些应用能接收这个Intent。\n\n## 添加一个Intent Filter\n\n为了合适地定义你的应用中的Activity所能处理的Intent,每个添加的Intent Filter都需要尽可能地具体。\n一个标准的Intent包含以下元素：\n\n### Action\n将要执行的动作名称，规定在你的`<action>`标签中\n### Data\n描述所需传递的数据，规定在你的`<data>`标签中。可以用多个属性规定这个元素，比如说MIME类型，uri前缀，uri scheme，或者是这些属性的组合或者重复。\n### Category\n提供一种附加的方法来标识activity如何处理这个Intent，通常和用户的手势位置从哪儿开始有关。系统支持多种不同的分类，但是大部分很少用的到。**但是，所有隐式Intent默认被定义成CATEGORY_DEFAULT**\n\n举个栗子，这是一个能接收ACTION_SEND动作，文字或者图像作为数据的Activity：\n```\n<activity android:name=\"ShareActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.SEND\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <data android:mimeType=\"text/plain\"/>\n        <data android:mimeType=\"image/*\"/>\n    </intent-filter>\n</activity>\n```\n每个Intent只能确定一个Action和一种data类型，但`<intent-filter>`可以含有多个`<action>`, `<category>`, 和 `<data>`。\n\n> 注意：为了能接收隐式Intent，你必须将CATEGORY_DEFAULT这个category加入intent filter中。因为隐式Intent默认分类就是CATEGORY_DEFAULT\n\n## 在你的Activity中处理传递过来的Intent\n\n为了决定你的Activity如何处理不同的Action，你可以从Intent中获取到Action进行处理。\n当你的Activity启动时，可以调用getIntent（）获取到启动Activity的Intent。\n举个栗子：\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.main);\n\n    // Get the intent that started this activity\n    Intent intent = getIntent();\n    Uri data = intent.getData();\n\n    // Figure out what to do based on the intent type\n    if (intent.getType().indexOf(\"image/\") != -1) {\n        // Handle intents with image data ...\n    } else if (intent.getType().equals(\"text/plain\")) {\n        // Handle intents with text ...\n    }\n}\n```\n\n## 返回一个结果\n如果你想将执行结果返回给拉起你的Actvity，只要简单的调用setResult（），指定返回码和Intent。当操作结束需要返回到原来的Activity时，需要调用finish()结束你的Activity。\n举个栗子：\n```\n// Create intent to deliver some kind of result data\nIntent result = new Intent(\"com.example.RESULT_ACTION\", Uri.parse(\"content://result_uri\");\nsetResult(Activity.RESULT_OK, result);\nfinish()\n```\n你必须指定一个返回码。通常都是RESULT_OK 或者 RESULT_CANCELED。你还可以用Intent带上额外的数据。\n\n>注意：返回结果默认返回码是RESULT_CANCELED，因此，如果用户在完成动作且你设置返回结果之前按下返回键，原来的Acitvity会接受到“cancel”的结果\n\n\n\n\n","slug":"【Android training】允许其他应用拉起你的应用","published":1,"updated":"2015-11-09T12:07:59.000Z","comments":1,"photos":[],"link":"","_id":"cije95mlr0009vc1ngibjuxcw"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cije95mlj0001vc1nj7h44y6e","tag_id":"cije95mlk0002vc1nl21ocejq","_id":"cije95mll0003vc1nenqahryw"},{"post_id":"cije95mlm0004vc1n0s0x5t5e","tag_id":"cije95mln0005vc1nuhv578rm","_id":"cije95mln0006vc1nyygp118f"},{"post_id":"cije95mlp0007vc1no2pxtnta","tag_id":"cije95mln0005vc1nuhv578rm","_id":"cije95mlq0008vc1ny5ex4edo"},{"post_id":"cije95mlr0009vc1ngibjuxcw","tag_id":"cije95mln0005vc1nuhv578rm","_id":"cije95mls000avc1n0rnuyrdo"}],"Tag":[{"name":"感悟","_id":"cije95mlk0002vc1nl21ocejq"},{"name":"Android training 翻译","_id":"cije95mln0005vc1nuhv578rm"}]}}